@model List<DictionaryWord>
@{
    ViewData["Title"] = "Từ vựng JLPT";

    // số item hiển thị mỗi lần
    const int Batch = 10;
    // keyword & level
    string keyword = (string)ViewBag.Keyword;
    int? level = (int?)ViewBag.Level;
}

@section Styles {
    <!-- Google Fonts & Bootstrap Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

    <style>
        /* Title gradient */
        h2 {
            font-family: 'Source Sans Pro', sans-serif;
            background: linear-gradient(45deg, #ff6b6b, #dc3545);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-align: center;
            margin-bottom: 1.5rem;
            margin-left: 27rem;
        }
        /* Search box */
        #searchForm {
            background: #fff;
            padding: 1rem 1.5rem;
            border-radius: 1rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }
        #searchForm .input-group-text {
            background: #ffcccc;
            border: none;
            border-top-left-radius: 50px;
            border-bottom-left-radius: 50px;
        }
        #searchForm .form-control {
            border: 1px solid #ddd;
            border-left: none;
            border-top-right-radius: 50px;
            border-bottom-right-radius: 50px;
            height: 3.2rem;
            padding: 0 1.2rem;
        }
        #searchForm .form-select {
            border-radius: 50px;
            height: 3.2rem;
            padding: 0 1.2rem;
            border: 1px solid #ddd;
        }
        /* Cards */
        .badge-level {
            background-color: #ffcccc;
            color: #b02a37;
            padding: .25em .6em;
            border-radius: .25rem;
        }
        .play-btn {
            font-size: 1.25rem;
            color: #dc3545;
            background: transparent;
            border: none;
        }
        .play-btn:hover { color: #a71d2a; }

        /* Grid */
        .row-cols-md-2 { --bs-columns: 2; }
    </style>
}

<div class="container my-4">
    <h2 class="gradient-text">Từ điển từ vựng JLPT</h2>

  <form id="searchForm" method="get"
      asp-controller="Dictionary"
      asp-action="Search"
      class="row g-3 justify-content-center mb-4">
  <div class="col-md-5">
    <div class="input-group">
      <span class="input-group-text"><i class="bi bi-search"></i></span>
      <input type="text" name="keyword" class="form-control"
             placeholder="Nhập từ tiếng Nhật…"
             value="@keyword" />
    </div>
  </div>
  <div class="col-md-3">
            <select id="levelFilter" name="level" class="form-select">
                <option value="">-- Cấp độ JLPT --</option>
                @for (int lv = 5; lv >= 1; lv--)
                {
                    if (level == lv)
                    {
                        <option value="@lv" selected>@($"N{lv}")</option>
                    }
                    else
                    {
                        <option value="@lv">@($"N{lv}")</option>
                    }
                }
            </select>

  </div>
</form>


  @if (!Model.Any())
  {
    <div class="alert alert-warning text-center">
      Không tìm thấy kết quả phù hợp.
    </div>
  }
  else
  {
    <div id="wordsContainer" class="row row-cols-1 row-cols-md-2 g-4">
      @for(int i = 0; i < Model.Count; i++)
      {
        var w = Model[i];
        // hide anything beyond the first Batch items
        var hidden = i >= Batch ? "style=\"display:none;\"" : "";
        <div class="col word-card" data-index="@i" @Html.Raw(hidden)>
          <div class="card shadow-sm border-0 h-100">
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center mb-2">
                <h5 class="card-title text-danger fw-bold">@w.Word</h5>
                <button type="button" class="play-btn" title="Phát âm">
                  <i class="bi bi-volume-up-fill"></i>
                </button>
              </div>
              <h6 class="card-subtitle mb-2 text-muted">@w.Romaji</h6>
              <p class="card-text">
                <strong>Phiên âm:</strong> @w.Furigana <br/>
                <strong>Nghĩa:</strong> @w.Meaning <br/>
                <span class="badge-level">@($"JLPT N{w.Level}")</span>
              </p>
            </div>
          </div>
        </div>
      }
    </div>

    @* view-more button *@
    @if (Model.Count > Batch)
    {
      <div class="text-center mt-4">
        <button id="btnViewMore" class="btn btn-outline-danger">
          Xem thêm…
        </button>
      </div>
    }
  }
</div>

@section Scripts {
    <script>
        (function(){
          const batch = @Batch;     // 10
          let shown   = batch;      // đã lộ
          const total = @Model.Count;

          // 1) Play audio (giữ nguyên)
          document.querySelectorAll('.play-btn').forEach(btn =>
            btn.addEventListener('click', () => {
              const jp   = btn.closest('.word-card')
                            .querySelector('.card-title').textContent;
              const utt  = new SpeechSynthesisUtterance(jp);
              utt.lang   = 'ja-JP';
              speechSynthesis.speak(utt);
            })
          );

          // 2) View more (chỉ khi không đang tìm)
          const btnMore = document.getElementById('btnViewMore');
          function revealBatch() {
            const cards = document.querySelectorAll('.word-card');
            const next  = Math.min(shown + batch, total);
            for (let i = shown; i < next; i++) {
              cards[i].style.display = '';
            }
            shown = next;
            if (shown >= total) btnMore.style.display = 'none';
          }
          if (btnMore) {
            btnMore.addEventListener('click', revealBatch);
          }

          // 3) Live‐filter trên toàn bộ cards
          const input = document.querySelector('input[name="keyword"]');
          input.addEventListener('input', ()=>{
            const term = input.value.trim().toLowerCase();
            const cards = document.querySelectorAll('.word-card');

            if (term === "") {
              // *Không tìm*: quay về trạng thái ban đầu
              cards.forEach((c, idx) => {
                c.style.display = (idx < shown) ? "" : "none";
              });
              if (btnMore && shown < total) btnMore.style.display = "";
              return;
            }

            // *Đang tìm*: show tất cả khớp, ẩn hết còn lại
            cards.forEach(c => {
              const text = (
                c.querySelector('.card-title').textContent +
                c.querySelector('.card-subtitle').textContent +
                c.querySelector('.card-text').textContent
              ).toLowerCase();
              c.style.display = text.includes(term) ? "" : "none";
            });
            // lúc tìm thì ẩn luôn nút ViewMore
            if (btnMore) btnMore.style.display = "none";
          });
        })();
    </script>

    <!-- level dropdown auto‐submit -->
    <script>
        document.getElementById('levelFilter')
          .addEventListener('change', ()=> {
            document.getElementById('searchForm').submit();
          });
    </script>
}

