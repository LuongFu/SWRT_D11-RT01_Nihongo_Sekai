@using JapaneseLearningPlatform.Models.Partner
@using JapaneseLearningPlatform.Data.Enums
@using JapaneseLearningPlatform.Helpers
@model IEnumerable<PartnerProfile>

@{
    ViewData["Title"] = "Đơn ứng tuyển đối tác";
    var filter = (PartnerStatus)(ViewData["CurrentFilter"] ?? PartnerStatus.Pending);

    // Base dataset by status
    var allItems = Model.Where(p => p.Status == filter);

    // Stats for Pending tab
    var pendingAll = Model.Where(p => p.Status == PartnerStatus.Pending);
    var todayLocal = DateTime.Now.Date;
    var pendingToday = pendingAll.Count(p => p.CreatedAt.ToLocalTime().Date == todayLocal);

    // Read query params
    var expParam = Context.Request.Query["exp"].ToString();
    var specParam = Context.Request.Query["spec"].ToString();
    var dateParam = Context.Request.Query["dateRange"].ToString();
    var page = int.TryParse(Context.Request.Query["page"], out var pg) ? pg : 1;

    // Apply filters
    if (!string.IsNullOrEmpty(expParam) &&
        Enum.TryParse<YearsOfExperience>(expParam, out var expVal))
    {
        allItems = allItems.Where(p => p.YearsOfExperience == expVal);
    }

    if (!string.IsNullOrEmpty(specParam) &&
        Enum.TryParse<SpecializationType>(specParam, out var specVal))
    {
        allItems = allItems.Where(p => p.Specializations.Any(s => s.Specialization == specVal));
    }

    if (!string.IsNullOrEmpty(dateParam))
    {
        if (filter == PartnerStatus.Pending)
        {
            if (dateParam == "today")
            {
                allItems = allItems.Where(p => p.CreatedAt.ToLocalTime().Date == todayLocal);
            }
            else if (int.TryParse(dateParam, out var days))
            {
                allItems = allItems.Where(p => p.CreatedAt.ToLocalTime().Date >= todayLocal.AddDays(-days));
            }
        }
        else // Approved
        {
            if (dateParam == "today")
            {
                allItems = allItems.Where(p =>
                    p.DecisionAt.HasValue &&
                    p.DecisionAt.Value.ToLocalTime().Date == todayLocal);
            }
            else if (int.TryParse(dateParam, out var days))
            {
                allItems = allItems.Where(p =>
                    p.DecisionAt.HasValue &&
                    p.DecisionAt.Value.ToLocalTime().Date >= todayLocal.AddDays(-days));
            }
        }
    }

    // Pagination
    int pageSize = 10;
    int totalCount = allItems.Count();
    int totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
    var items = allItems
                       .Skip((page - 1) * pageSize)
                       .Take(pageSize)
                       .ToList();
}

@section Styles {
    <!-- Google Fonts & Bootstrap Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet" />

    <style>
        /* ===== BASE ===== */
        body {
            font-family: 'Source Sans Pro', sans-serif;
            background: #faf8f6 url('/images/pattern-wave.png') center/200px repeat;
            color: #4a4a4a;
        }

        .container {
            max-width: 1100px;
            margin: 3rem auto;
            padding: 0 1rem;
        }

        h1 {
            text-align: center;
            color: #9e2f2f;
            margin-bottom: 2rem;
        }

        /* ===== STATS CARDS ===== */
        .stat-card {
            background: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
            transition: transform .15s, box-shadow .15s;
        }

            .stat-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            }

            .stat-card .card-body {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 0.75rem;
            }

        /* ===== TABS ===== */
        .btn-group .btn {
            min-width: 120px;
            transition: background .15s;
        }

        .btn-group .btn-outline-secondary {
            color: #6c6c6c;
            border-color: #ccc;
        }

            .btn-group .btn-outline-secondary:hover {
                background: #f5f5f5;
            }

        /* ===== FILTER BAR ===== */
        .filter-bar {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            margin-bottom: 2rem;
            background: #fff;
            padding: 1rem;
            border-radius: 0.75rem;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }

            .filter-bar .hover-dropdown,
            .filter-bar .apply-btn {
                flex: 1 1 150px;
                height: 2.75rem;
            }

                /* dropdown button default */
                .filter-bar .hover-dropdown .btn {
                    width: 100%;
                    height: 100%;
                    text-align: left;
                    background: #f8f9fa;
                    border: 1px solid #ddd;
                    border-radius: 0.5rem;
                    padding: 0 .75rem;
                    transition: box-shadow .15s;
                }
                /* specialization dropdown highlight */
                .filter-bar .hover-dropdown:nth-child(2) .btn {
                    background: #fde2e2;
                    border-color: #f8d7da;
                }

                .filter-bar .hover-dropdown .dropdown-menu {
                    max-height: 180px;
                    overflow-y: auto;
                    border-radius: 0.5rem;
                    box-shadow: 0 .5rem 1rem rgba(0,0,0,0.1);
                }

            .filter-bar .dropdown-item:hover,
            .filter-bar .dropdown-item.active {
                background: #fdf0f0;
                color: #9e2f2f;
            }

            /* Clear filters (“Xóa bộ lọc”) button */
            .filter-bar .apply-btn {
                display: flex;
                align-items: center;
                justify-content: center;
                background: #e53935;
                color: #fff;
                border: none;
                border-radius: 0.5rem;
                font-weight: 600;
                transition: background .15s, transform .1s;
            }

                .filter-bar .apply-btn:hover {
                    background: #b71c1c;
                    transform: translateY(-1px);
                }

        /* ===== TABLE ===== */
        .table-wrapper {
            background: #fff;
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            margin-bottom: 2rem;
        }

            .table-wrapper thead th {
                background: #fde2e2;
                color: #9e2f2f;
                border: none;
                padding: 0.75rem;
            }

            .table-wrapper tbody tr {
                transition: background .15s, transform .15s;
            }

                .table-wrapper tbody tr:hover {
                    background: #fff5f5;
                    transform: translateY(-1px);
                }

        /* ===== SPECIALIZATION BADGE ===== */
        .badge-special {
            background: #ffd6d1 !important;
            color: #a32a2f !important;
            font-weight: 600;
            padding: 0.25em 0.5em;
            border-radius: 0.5rem;
        }

        /* ===== PAGINATION ===== */
        .pagination {
            justify-content: center;
            margin-top: 1.5rem;
        }

            .pagination .page-link {
                margin: 0 0.25rem;
                border-radius: 0.5rem;
                transition: background .15s;
            }

            .pagination .page-item.active .page-link {
                background: #9e2f2f;
                border-color: #9e2f2f;
                color: #fff;
            }

        /* ===== MODALS ===== */
        .modal-content {
            border-radius: 0.75rem;
        }
    </style>
}


<div class="container">
    <h1>@ViewData["Title"]</h1>

    @* Pending stats *@    
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card stat-card border-0 p-3">
                <div class="card-body">
                    <div>
                        <small class="text-muted">Tổng đơn chờ</small>
                        <h4>@pendingAll.Count()</h4>
                    </div>
                    <i class="bi bi-hourglass-split fs-2 text-danger"></i>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card stat-card border-0 p-3">
                <div class="card-body">
                    <div>
                        <small class="text-muted">Chờ hôm nay</small>
                        <h4>@pendingToday</h4>
                    </div>
                    <i class="bi bi-calendar-day fs-2 text-warning"></i>
                </div>
            </div>
        </div>
    </div>    

    @* Tabs *@
    <div class="d-flex justify-content-center mb-4">
        <div class="btn-group shadow-sm">
            <a asp-action="PartnerApplications" asp-route-filter="Pending"
               class="btn @(filter == PartnerStatus.Pending ? "btn-danger" : "btn-outline-secondary")">
                Chờ duyệt
            </a>
            <a asp-action="PartnerApplications" asp-route-filter="Approved"
               class="btn @(filter == PartnerStatus.Approved ? "btn-success" : "btn-outline-secondary")">
                Đã duyệt
            </a>
        </div>
    </div>

@* Bộ lọc *@
    <form method="get" asp-controller="Admin" asp-action="PartnerApplications" id="filterForm" class="row g-3 mb-4">
        <input type="hidden" name="filter" value="@filter" />
        <input type="hidden" name="exp" id="expInput" value="@expParam" />
        <input type="hidden" name="spec" id="specInput" value="@specParam" />
        <input type="hidden" name="dateRange" id="dateInput" value="@dateParam" />

        <!-- Kinh nghiệm -->
        <div class="col-md-3 hover-dropdown">
            <label class="form-label">Kinh nghiệm</label>
            <button type="button"
                    class="btn btn-light dropdown-toggle w-100 text-start"
                    data-bs-toggle="dropdown">
                @(string.IsNullOrEmpty(expParam)
                                ? "Tất cả"
                                : ((YearsOfExperience)Enum.Parse(typeof(YearsOfExperience), expParam))
                                .GetDisplayName())
            </button>
            <ul class="dropdown-menu w-100">
                <li>
                    <a class="dropdown-item exp-item @(string.IsNullOrEmpty(expParam) ? "active" : "")"
                       data-val="">
                        Tất cả
                    </a>
                </li>
                @foreach (var e in Enum.GetValues(typeof(YearsOfExperience)).Cast<YearsOfExperience>())
                {
                    var sel = expParam == e.ToString() ? "active" : "";
                    <li>
                        <a class="dropdown-item exp-item @sel"
                           data-val="@e">
                            @e.GetDisplayName()
                        </a>
                    </li>
                }
            </ul>
        </div>

        <!-- Chuyên môn -->
        <div class="col-md-3 hover-dropdown">
            <label class="form-label">Chuyên môn</label>
            <button type="button"
                    class="btn btn-light dropdown-toggle w-100 text-start"
                    data-bs-toggle="dropdown">
                @(string.IsNullOrEmpty(specParam)
                                ? "Tất cả"
                                : ((SpecializationType)Enum.Parse(typeof(SpecializationType), specParam))
                                .GetDisplayName())
            </button>
            <ul class="dropdown-menu w-100">
                <li>
                    <a class="dropdown-item spec-item @(string.IsNullOrEmpty(specParam) ? "active" : "")"
                       data-val="">
                        Tất cả
                    </a>
                </li>
                @foreach (var s in Enum.GetValues(typeof(SpecializationType)).Cast<SpecializationType>())
                {
                    var sel = specParam == s.ToString() ? "active" : "";
                    <li>
                        <a class="dropdown-item spec-item @sel"
                           data-val="@s">
                            @s.GetDisplayName()
                        </a>
                    </li>
                }
            </ul>
        </div>

        <!-- Ngày gửi / quyết định -->
        <div class="col-md-3 hover-dropdown">
            <label class="form-label">
                @(filter == PartnerStatus.Pending ? "Ngày gửi" : "Ngày quyết định")
            </label>
            <button type="button"
                    class="btn btn-light dropdown-toggle w-100 text-start"
                    data-bs-toggle="dropdown">
                @(string.IsNullOrEmpty(dateParam)
                                ? "Tất cả"
                                : dateParam == "today" ? "Hôm nay"
                                : dateParam == "3" ? "3 ngày qua"
                                : dateParam == "7" ? "7 ngày qua"
                                : dateParam)
            </button>
            <ul class="dropdown-menu w-100">
                <li>
                    <a class="dropdown-item date-item @(string.IsNullOrEmpty(dateParam) ? "active" : "")"
                       data-val="">
                        Tất cả
                    </a>
                </li>
                <li>
                    <a class="dropdown-item date-item @(dateParam == "today" ? "active" : "")"
                       data-val="today">
                        Hôm nay
                    </a>
                </li>
                <li>
                    <a class="dropdown-item date-item @(dateParam == "3" ? "active" : "")"
                       data-val="3">
                        3 ngày qua
                    </a>
                </li>
                <li>
                    <a class="dropdown-item date-item @(dateParam == "7" ? "active" : "")"
                       data-val="7">
                        7 ngày qua
                    </a>
                </li>
            </ul>
        </div>

        <!-- Submit -->
        <div class="col-md-3 d-grid">
            <button type="submit" class="btn apply-btn w-100">Áp dụng lọc</button>
        </div>
    </form>

    @if (!items.Any())
    {
        <div class="alert alert-info">
            Không có đơn ứng tuyển nào phù hợp tiêu chí.
        </div>
    }
    else
    {
        <table class="table table-striped table-hover bg-white shadow-sm rounded">
            <thead class="table-light">
                <tr>
                    <th>Họ và tên</th>
                    <th>Email</th>
                    <th>Kinh nghiệm</th>
                    <th>@(filter == PartnerStatus.Pending ? "Ngày gửi" : "Ngày quyết định")</th>
                    <th>Chuyên môn</th>
                    <th class="text-center">Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in items)
                {
                    var specs = p.Specializations.Select(sp => sp.Specialization).ToList();
                    var shown = specs.Take(2).ToList();
                    var extra = specs.Count - shown.Count();
                    <tr>
                        <td>@p.User.FullName</td>
                        <td>@p.User.Email</td>
                        <td>@p.YearsOfExperience.GetDisplayName()</td>
                        <td>
                            @(filter == PartnerStatus.Pending
                                                ? p.CreatedAt.ToString("yyyy-MM-dd")
                                                : p.DecisionAt?.ToString("yyyy-MM-dd") ?? "-")
                </td>
                <td>
                    @foreach (var sp in shown)
                            {
                                <span class="badge bg-secondary me-1">@sp.GetDisplayName()</span>
                            }
                            @if (extra > 0)
                            {
                                <span class="badge bg-secondary"
                                      data-bs-toggle="tooltip"
                                      title="@string.Join(", ", specs.Skip(2).Select(x => x.GetDisplayName()))">
                                    +@extra
                                </span>
                            }
                        </td>
                        <td class="text-center">
                            <a asp-action="ReviewPartner" asp-route-id="@p.Id"
                               class="btn btn-sm btn-outline-info me-1">Xem</a>

                            @if (filter == PartnerStatus.Pending)
                            {
                                <!-- Phê duyệt -->
                                <button type="button"
                                        class="btn btn-sm btn-success me-1"
                                        data-bs-toggle="modal"
                                        data-bs-target="#approveModal-@p.Id">
                                    Phê duyệt
                                </button>
                                <!-- Từ chối -->
                                <button type="button"
                                        class="btn btn-sm btn-danger"
                                        data-bs-toggle="modal"
                                        data-bs-target="#rejectModal-@p.Id">
                                    Từ chối
                                </button>
                            }
                        </td>
                    </tr>
                }
                
            </tbody>
        </table>
        }
    </div>

    @* Pagination *@
    @if (totalPages > 1)
    {
        <nav>
            <ul class="pagination">
                <li class="page-item @(page == 1 ? "disabled" : "")">
                    <a class="page-link" href="?filter=@filter&page=@(page - 1)&exp=@expParam&spec=@specParam&dateRange=@dateParam">«</a>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == page ? "active" : "")">
                        <a class="page-link" href="?filter=@filter&page=@i&exp=@expParam&spec=@specParam&dateRange=@dateParam">@i</a>
                    </li>
                }
                <li class="page-item @(page == totalPages ? "disabled" : "")">
                    <a class="page-link" href="?filter=@filter&page=@(page + 1)&exp=@expParam&spec=@specParam&dateRange=@dateParam">»</a>
                </li>
            </ul>
        </nav>
    }
</div>

@foreach (var p in items)
{
    <!-- Modal phê duyệt -->
    <div class="modal fade" id="approveModal-@p.Id" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <form asp-action="ApprovePartner" asp-controller="Admin" method="post" class="modal-content">
                <input type="hidden" name="id" value="@p.Id" />
                <div class="modal-header border-0">
                    <h5 class="modal-title text-success"><i class="bi bi-check-circle-fill"></i> Xác nhận phê duyệt</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    Bạn có chắc muốn <strong>phê duyệt</strong> đơn của <em>@p.User.FullName</em>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Hủy
                    </button>
                    <button type="submit" class="btn btn-success">Đồng ý phê duyệt</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal từ chối -->
    <div class="modal fade" id="rejectModal-@p.Id" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <form asp-action="RejectPartner" asp-controller="Admin" method="post" class="modal-content">
                <input type="hidden" name="id" value="@p.Id" />                
                <div class="modal-header border-0">
                    <h5 class="modal-title text-success"><i class="bi bi-check-circle-fill"></i> Xác nhận từ chối</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    Bạn có chắc muốn <strong>từ chối</strong> đơn của <em>@p.User.FullName</em>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Hủy
                    </button>
                    <button type="submit" class="btn btn-danger">Đồng ý từ chối</button>
                </div>
            </form>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', ()=> {
            // Tooltip init
            document.querySelectorAll('[data-bs-toggle="tooltip"]')
                    .forEach(el => new bootstrap.Tooltip(el));

            // Wire up dropdown selection (chỉ set hidden input, highlight active, update button text)
            const wireUp = (selector, inputId) => {
                document.querySelectorAll(selector).forEach(el =>
                    el.addEventListener('click', e => {
                        e.preventDefault();
                        document.getElementById(inputId).value = el.dataset.val;
                        document.querySelectorAll(selector).forEach(x => x.classList.remove('active'));
                        el.classList.add('active');
                        el.closest('.hover-dropdown').querySelector('button').textContent = el.textContent.trim();
                    })
                );
            };
            wireUp('.exp-item' , 'expInput');
            wireUp('.spec-item', 'specInput');
            wireUp('.date-item', 'dateInput');
        });
    </script>
}
 