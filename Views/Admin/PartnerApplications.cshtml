@using JapaneseLearningPlatform.Models.Partner
@using JapaneseLearningPlatform.Data.Enums
@using JapaneseLearningPlatform.Helpers
@model IEnumerable<PartnerProfile>

@{
    ViewData["Title"] = "Đơn ứng tuyển đối tác";
    var filter = (PartnerStatus)(ViewData["CurrentFilter"] ?? PartnerStatus.Pending);

    // Base dataset by status
    var allItems = Model.Where(p => p.Status == filter);

    // Stats for Pending tab
    var pendingAll = Model.Where(p => p.Status == PartnerStatus.Pending);
    var todayLocal = DateTime.Now.Date;
    var pendingToday = pendingAll.Count(p => p.CreatedAt.ToLocalTime().Date == todayLocal);

    // Read query params
    var expParam = Context.Request.Query["exp"].ToString();
    var specParam = Context.Request.Query["spec"].ToString();
    var dateParam = Context.Request.Query["dateRange"].ToString();
    var page = int.TryParse(Context.Request.Query["page"], out var pg) ? pg : 1;

    // Apply filters
    if (!string.IsNullOrEmpty(expParam) &&
        Enum.TryParse<YearsOfExperience>(expParam, out var expVal))
    {
        allItems = allItems.Where(p => p.YearsOfExperience == expVal);
    }

    if (!string.IsNullOrEmpty(specParam) &&
        Enum.TryParse<SpecializationType>(specParam, out var specVal))
    {
        allItems = allItems.Where(p => p.Specializations.Any(s => s.Specialization == specVal));
    }

    if (!string.IsNullOrEmpty(dateParam))
    {
        if (filter == PartnerStatus.Pending)
        {
            if (dateParam == "today")
            {
                allItems = allItems.Where(p => p.CreatedAt.ToLocalTime().Date == todayLocal);
            }
            else if (int.TryParse(dateParam, out var days))
            {
                allItems = allItems.Where(p => p.CreatedAt.ToLocalTime().Date >= todayLocal.AddDays(-days));
            }
        }
        else // Approved
        {
            if (dateParam == "today")
            {
                allItems = allItems.Where(p =>
                    p.DecisionAt.HasValue &&
                    p.DecisionAt.Value.ToLocalTime().Date == todayLocal);
            }
            else if (int.TryParse(dateParam, out var days))
            {
                allItems = allItems.Where(p =>
                    p.DecisionAt.HasValue &&
                    p.DecisionAt.Value.ToLocalTime().Date >= todayLocal.AddDays(-days));
            }
        }
    }

    // Pagination
    int pageSize = 10;
    int totalCount = allItems.Count();
    int totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
    var items = allItems
                       .Skip((page - 1) * pageSize)
                       .Take(pageSize)
                       .ToList();
}

@section Styles {
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap" rel="stylesheet" />

    <style>
        /* wrapper để dropdown con không đẩy layout */
        .hover-dropdown {
            position: relative;
        }

            .hover-dropdown .dropdown-menu {
                display: none;
                position: absolute;
                top: 100%;
                left: 0;
                z-index: 1000;
                max-height: 200px;
                overflow-y: auto;
                background: #fff;
                box-shadow: 0 .5rem 1rem rgba(0,0,0,.15);
            }

            .hover-dropdown:hover .dropdown-menu {
                display: block;
            }

            .hover-dropdown .dropdown-item:hover {
                background-color: #f8f9fa;
                color: #dc3545;
            }
        /* nhấn mạnh nút Apply */
        .apply-btn {
            background: #dc3545;
            border-color: #dc3545;
        }

            .apply-btn:hover {
                background: #c82333;
                border-color: #bd2130;
            }
    </style>
}

@{
    ViewData["Title"] = "Đơn ứng tuyển đối tác";
}

<div class="container mt-5">
    <h1 class="mb-4">@ViewData["Title"]</h1>

    @* Thẻ thống kê *@
    @if (filter == PartnerStatus.Pending)
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-danger text-white mb-3">
                    <div class="card-body">
                        <h5>Tổng đơn chờ</h5>
                        <p class="display-4 mb-0">@pendingAll.Count()</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white mb-3">
                    <div class="card-body">
                        <h5>Chờ hôm nay</h5>
                        <p class="display-4 mb-0">@pendingToday</p>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Tabs *@
    <div class="btn-group mb-4">
        <a asp-action="PartnerApplications" asp-route-filter="Pending"
           class="btn @(filter == PartnerStatus.Pending ? "btn-primary" : "btn-outline-primary")">
            Chờ duyệt
        </a>
        <a asp-action="PartnerApplications" asp-route-filter="Approved"
           class="btn @(filter == PartnerStatus.Approved ? "btn-success" : "btn-outline-success")">
            Đã duyệt
        </a>
    </div>

    @* Bộ lọc *@
    <form method="get" id="filterForm" class="row g-3 mb-4">
        <input type="hidden" name="filter" value="@filter" />
        <input type="hidden" name="exp" id="expInput" value="@expParam" />
        <input type="hidden" name="spec" id="specInput" value="@specParam" />
        <input type="hidden" name="dateRange" id="dateInput" value="@dateParam" />

        <!-- Kinh nghiệm -->
        <div class="col-md-3 hover-dropdown">
            <label class="form-label">Kinh nghiệm</label>
            <button type="button"
                    class="btn btn-light dropdown-toggle w-100 text-start"
                    data-bs-toggle="dropdown">
                @(string.IsNullOrEmpty(expParam)
                                ? "Tất cả"
                                : Enum.Parse<YearsOfExperience>(expParam).GetDisplayName())
            </button>
            <ul class="dropdown-menu w-100">
                <li>
                    <a class="dropdown-item exp-item @(string.IsNullOrEmpty(expParam) ? "active" : "")"
                       data-val="">Tất cả</a>
                </li>
                @foreach (var e in Enum.GetValues(typeof(YearsOfExperience)).Cast<YearsOfExperience>())
                {
                    var sel = expParam == e.ToString() ? "active" : "";
                    <li>
                        <a class="dropdown-item exp-item @sel"
                           data-val="@e">@e.GetDisplayName()</a>
                    </li>
                }
            </ul>
        </div>

        <!-- Chuyên môn -->
        <div class="col-md-3 hover-dropdown">
            <label class="form-label">Chuyên môn</label>
            <button type="button"
                    class="btn btn-light dropdown-toggle w-100 text-start"
                    data-bs-toggle="dropdown">
                @(string.IsNullOrEmpty(specParam)
                                ? "Tất cả"
                                : ((SpecializationType)Enum.Parse(typeof(SpecializationType), specParam))
                                .GetDisplayName())
            </button>
            <ul class="dropdown-menu w-100">
                <li>
                    <a class="dropdown-item spec-item @(string.IsNullOrEmpty(specParam) ? "active" : "")"
                       data-val="">Tất cả</a>
                </li>
                @foreach (var s in Enum.GetValues(typeof(SpecializationType)).Cast<SpecializationType>())
                {
                    var sel = specParam == s.ToString() ? "active" : "";
                    <li>
                        <a class="dropdown-item spec-item @sel"
                           data-val="@s">@s.GetDisplayName()</a>
                    </li>
                }
            </ul>
        </div>

        <!-- Ngày -->
        <div class="col-md-3 hover-dropdown">
            <label class="form-label">
                @(filter == PartnerStatus.Pending ? "Ngày gửi" : "Ngày quyết định")
            </label>
            <button type="button"
                    class="btn btn-light dropdown-toggle w-100 text-start"
                    data-bs-toggle="dropdown">
                @(string.IsNullOrEmpty(dateParam)
                                ? "Tất cả"
                                : dateParam == "today" ? "Hôm nay"
                                : dateParam == "3" ? "3 ngày qua"
                                : dateParam == "7" ? "7 ngày qua"
                                : dateParam)
            </button>
            <ul class="dropdown-menu w-100">
                <li>
                    <a class="dropdown-item date-item @(string.IsNullOrEmpty(dateParam) ? "active" : "")"
                       data-val="">Tất cả</a>
                </li>
                <li>
                    <a class="dropdown-item date-item @(dateParam == "today" ? "active" : "")"
                       data-val="today">Hôm nay</a>
                </li>
                <li>
                    <a class="dropdown-item date-item @(dateParam == "3" ? "active" : "")"
                       data-val="3">3 ngày qua</a>
                </li>
                <li>
                    <a class="dropdown-item date-item @(dateParam == "7" ? "active" : "")"
                       data-val="7">7 ngày qua</a>
                </li>
            </ul>
        </div>

        <div class="col-md-3 d-flex align-items-end">
            <button type="submit" class="btn apply-btn w-100">Áp dụng</button>
        </div>
    </form>

    @if (!items.Any())
    {
        <div class="alert alert-info">
            Không có đơn ứng tuyển nào phù hợp tiêu chí.
        </div>
    }
    else
    {
        <table class="table table-striped table-hover bg-white shadow-sm rounded">
            <thead class="table-light">
                <tr>
                    <th>Họ và tên</th>
                    <th>Email</th>
                    <th>Kinh nghiệm</th>
                    <th>@(filter == PartnerStatus.Pending ? "Ngày gửi" : "Ngày quyết định")</th>
                    <th>Chuyên môn</th>
                    <th class="text-center">Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in items)
                {
                    var specs = p.Specializations.Select(sp => sp.Specialization).ToList();
                    var shown = specs.Take(2).ToList();
                    var extra = specs.Count - shown.Count();
                    <tr>
                        <td>@p.User.FullName</td>
                        <td>@p.User.Email</td>
                        <td>@p.YearsOfExperience.GetDisplayName()</td>
                        <td>
                            @(filter == PartnerStatus.Pending
                                                ? p.CreatedAt.ToString("yyyy-MM-dd")
                                                : p.DecisionAt?.ToString("yyyy-MM-dd") ?? "-")
                </td>
                <td>
                    @foreach (var sp in shown)
                            {
                                <span class="badge bg-secondary me-1">@sp.GetDisplayName()</span>
                            }
                            @if (extra > 0)
                            {
                                <span class="badge bg-secondary"
                                      data-bs-toggle="tooltip"
                                      title="@string.Join(", ", specs.Skip(2).Select(x => x.GetDisplayName()))">
                                    +@extra
                                </span>
                            }
                        </td>
                        <td class="text-center">
                            <a asp-action="ReviewPartner" asp-route-id="@p.Id"
                               class="btn btn-sm btn-outline-info me-1">Xem</a>

                            @if (filter == PartnerStatus.Pending)
                            {
                                <!-- Phê duyệt -->
                                <button type="button"
                                        class="btn btn-sm btn-success me-1"
                                        data-bs-toggle="modal"
                                        data-bs-target="#approveModal-@p.Id">
                                    Phê duyệt
                                </button>
                                <!-- Từ chối -->
                                <button type="button"
                                        class="btn btn-sm btn-danger"
                                        data-bs-toggle="modal"
                                        data-bs-target="#rejectModal-@p.Id">
                                    Từ chối
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @* Phân trang *@
        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(page == 1 ? "disabled" : "")">
                    <a class="page-link"
                       href="?filter=@filter&page=@(page - 1)&exp=@expParam&spec=@specParam&dateRange=@dateParam">«</a>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == page ? "active" : "")">
                        <a class="page-link"
                           href="?filter=@filter&page=@i&exp=@expParam&spec=@specParam&dateRange=@dateParam">@i</a>
                    </li>
                }
                <li class="page-item @(page == totalPages ? "disabled" : "")">
                    <a class="page-link"
                       href="?filter=@filter&page=@(page + 1)&exp=@expParam&spec=@specParam&dateRange=@dateParam">»</a>
                </li>
            </ul>
        </nav>
    }
</div>

@foreach (var p in items)
{
    <!-- Modal phê duyệt -->
    <div class="modal fade" id="approveModal-@p.Id" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <form asp-action="ApprovePartner" asp-controller="Admin" method="post" class="modal-content">
                <input type="hidden" name="id" value="@p.Id" />
                <div class="modal-header">
                    <h5 class="modal-title text-success">Xác nhận phê duyệt</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Bạn có chắc muốn <strong>phê duyệt</strong> đơn của <em>@p.User.FullName</em>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Hủy
                    </button>
                    <button type="submit" class="btn btn-success">Đồng ý phê duyệt</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal từ chối -->
    <div class="modal fade" id="rejectModal-@p.Id" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <form asp-action="RejectPartner" asp-controller="Admin" method="post" class="modal-content">
                <input type="hidden" name="id" value="@p.Id" />
                <div class="modal-header">
                    <h5 class="modal-title text-danger">Xác nhận từ chối</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Bạn có chắc muốn <strong>từ chối</strong> đơn của <em>@p.User.FullName</em>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary"
                            data-bs-dismiss="modal">
                        Hủy
                    </button>
                    <button type="submit" class="btn btn-danger">Đồng ý từ chối</button>
                </div>
            </form>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', ()=> {
            // Tooltip init
            document.querySelectorAll('[data-bs-toggle="tooltip"]')
                    .forEach(el => new bootstrap.Tooltip(el));

            // Wire up dropdown selection (chỉ set hidden input, highlight active, update button text)
            const wireUp = (selector, inputId) => {
                document.querySelectorAll(selector).forEach(el =>
                    el.addEventListener('click', e => {
                        e.preventDefault();
                        document.getElementById(inputId).value = el.dataset.val;
                        document.querySelectorAll(selector).forEach(x => x.classList.remove('active'));
                        el.classList.add('active');
                        el.closest('.hover-dropdown').querySelector('button').textContent = el.textContent.trim();
                    })
                );
            };
            wireUp('.exp-item' , 'expInput');
            wireUp('.spec-item', 'specInput');
            wireUp('.date-item', 'dateInput');
        });
    </script>
}
