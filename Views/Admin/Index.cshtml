@using JapaneseLearningPlatform.Models
@using JapaneseLearningPlatform.Data.Enums
@using System.Text.Json

@{
    ViewData["Title"] = "Bảng điều khiển quản trị";
    Layout = "_Layout";
    ViewData["HideNavbar"] = false;
    ViewData["HideFooter"] = false;
}

@section Styles {
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap" rel="stylesheet" />
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" />

    <style>
        body {
            font-family: 'Source Sans Pro', sans-serif;
            background: #f8f9fe;
        }

        .admin-wrapper {
            display: flex;
            min-height: 100vh;
        }
        /* Sidebar */
        .admin-sidebar {
            width: 250px;
            background: linear-gradient(87deg, #e53935 0%, #d32f2f 100%);
            color: #fff;
            flex-shrink: 0;
            transition: width .3s;
        }

            .admin-sidebar.collapsed {
                width: 70px;
            }

            .admin-sidebar .nav-text {
                transition: opacity .2s;
            }

            .admin-sidebar.collapsed .nav-text {
                opacity: 0;
                visibility: hidden;
                width: 0;
                display: inline-block;
            }

        /* Main area */
        .admin-main {
            flex-grow: 1;
            padding: 2rem;
        }

        h1 {
            color: #333;
            margin-bottom: 1.5rem;
        }

        /* Statistic cards */
        .stat-card {
            transition: transform .2s, box-shadow .2s;
        }

            .stat-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 6px 18px rgba(0,0,0,0.1);
            }

        /* Charts row */
        .charts-row {
            margin-top: 2rem;
        }

            .charts-row .card {
                border: none;
                border-radius: .75rem;
                box-shadow: 0 2px 12px rgba(0,0,0,0.05);
                transition: transform .2s;
            }

                .charts-row .card:hover {
                    transform: translateY(-4px);
                    box-shadow: 0 6px 18px rgba(0,0,0,0.1);
                }

        /* Latest orders table */
        .table-responsive {
            margin-top: 2rem;
            border-radius: .5rem;
            overflow: hidden;
            box-shadow: 0 6px 18px rgba(0,0,0,0.06);
        }

        table thead {
            background: #ffe4e1;
        }

            table thead th {
                color: #661414;
                font-weight: 600;
                position: sticky;
                top: 0;
                z-index: 1;
            }

        table tbody tr:nth-child(odd) {
            background: #fff5f5;
        }

        table tbody tr:hover {
            background: #ffe4e1;
            transform: translateY(-2px);
        }

        /* Giới hạn chiều cao filter-bar, cho scrollbar khi overflow */
        .filter-bar {
            background-color: #f1f5f9;
            border-radius: .5rem;
            margin-top: 5%;
        }

            .filter-bar .form-label {
                font-weight: 600;
                color: #495057;
            }

            .filter-bar .form-select,
            .filter-bar .form-control {
                border-radius: .375rem;
            }

            .filter-bar .btn-outline-secondary {
                display: flex;
                align-items: center;
                gap: .25rem;
                border-radius: .375rem;
            }

                .filter-bar .btn-outline-secondary:hover {
                    background-color: #f8f9fa;
                    border-color: #ced4da;
                }

        #clear-filters:hover {
            background-color: #f8f9fa;
            border-color: #adb5bd;
            color: #212529;
        }

        /* ========== RESPONSIVE ========== */
        @@media (max-width: 768px) {
            .filter-bar {
                flex-direction: column;
                align-items: stretch;
            }

                .filter-bar .filter-group,
                #clear-filters {
                    width: 100%;
                }
        }

        /* Optional: làm paging nổi bật hơn */
        .pagination .page-item .page-link {
            color: #e53935;
            border-radius: .25rem;
            margin: 0 .125rem;
            min-width: 2.25rem;
            text-align: center;
        }

        .pagination .page-item.active .page-link {
            background-color: #e53935;
            color: #fff;
            border-color: #e53935;
        }

        .pagination .page-item .page-link:hover {
            background-color: rgba(229,53,92,0.1);
        }

        /* Cho pagination có khoảng “thở” */
        .table-responsive nav {
            padding: 0 1rem;
        }

        /* Nếu muốn pagination nhỏ gọn hơn */
        .pagination {
            margin-bottom: 0;
        }

            .pagination .page-item .page-link {
                min-width: 2.25rem;
                text-align: center;
            }


    </style>
}

    <div class="admin-main">
        <h1>Bảng điều khiển quản trị</h1>

        <!-- Thẻ thống kê -->
        <div class="row g-4">
            <div class="col-6 col-md-3">
                <div class="card stat-card p-3">
                    <div class="d-flex justify-content-between">
                        <div>
                            <small class="text-muted">Tổng người dùng</small>
                            <h5>@ViewBag.TotalUsers</h5>
                        </div>
                        <i class="bi bi-people-fill fs-2 text-danger"></i>
                    </div>
                </div>
            </div>
            <div class="col-6 col-md-3">
                <div class="card stat-card p-3">
                    <div class="d-flex justify-content-between">
                        <div>
                            <small class="text-muted">Đơn hàng</small>
                            <h5>@ViewBag.TotalOrders</h5>
                        </div>
                        <i class="bi bi-cart-check-fill fs-2 text-info"></i>
                    </div>
                </div>
            </div>
            <div class="col-6 col-md-3">
                <div class="card stat-card p-3">
                    <div class="d-flex justify-content-between">
                        <div>
                            <small class="text-muted">Doanh thu</small>
                            <h5>@string.Format("{0:N0}", ViewBag.TotalRevenue) VND</h5>
                        </div>
                        <i class="bi bi-currency-dollar fs-2 text-success"></i>
                    </div>
                </div>
            </div>
            <div class="col-6 col-md-3">
                <div class="card stat-card p-3">
                    <div class="d-flex justify-content-between">
                        <div>
                            <small class="text-muted">Lớp học</small>
                            <h5>@ViewBag.TotalClassrooms</h5>
                        </div>
                        <i class="bi bi-mortarboard-fill fs-2 text-warning"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Biểu đồ -->
        <div class="row charts-row row-cols-1 row-cols-md-2 g-4">
            <div class="col">
                <div class="card p-3 h-100">
                    <h6>Giá trị bán hàng</h6>
                    <canvas id="salesChart" height="200"></canvas>
                </div>
            </div>
            <div class="col">
                <div class="card p-3 h-100">
                    <h6>Tổng số đơn hàng</h6>
                    <canvas id="ordersChart" height="200"></canvas>
                </div>
            </div>
        </div>

    <!-- ==== 1) FILTER BAR ==== -->
    <div class="filter-bar card p-3 mb-4 shadow-sm">
        <div class="row gx-2 gy-3 align-items-end">
            <div class="col-auto">
                <label for="date-filter" class="form-label small mb-1">Ngày đặt</label>
                <select id="date-filter" class="form-select form-select-sm">
                    <option value="All">Tất cả</option>
                    <option value="Today">Hôm nay</option>
                    <option value="Last3Days">3 ngày vừa rồi</option>
                    <option value="Last7Days">7 ngày vừa rồi</option>
                </select>
            </div>

            <div class="col-auto">
                <label for="sort-date" class="form-label small mb-1">Thứ tự ngày</label>
                <select id="sort-date" class="form-select form-select-sm">
                    <option value="Newest">Mới nhất</option>
                    <option value="Oldest">Cũ nhất</option>
                </select>
            </div>

            <div class="col-auto">
                <label for="sort-amount" class="form-label small mb-1">Thứ tự tiền</label>
                <select id="sort-amount" class="form-select form-select-sm">
                    <option value="None">Không</option>
                    <option value="HighLow">Cao→Thấp</option>
                    <option value="LowHigh">Thấp→Cao</option>
                </select>
            </div>

            <div class="col">
                <label for="order-search" class="form-label small mb-1">Tìm kiếm</label>
                <input id="order-search"
                       type="text"
                       class="form-control form-control-sm"
                       placeholder="Email hoặc mã đơn..." />
            </div>

            <div class="col-auto">
                <button id="clear-filters" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-x-circle me-1"></i>Xóa bộ lọc
                </button>
            </div>
        </div>
    </div>


    <!-- ==== 2) ORDERS TABLE ==== -->
    <div class="table-responsive">
        <table class="table table-hover mb-0">
            <thead>
                <tr>
                    <th>Mã đơn hàng</th>
                    <th>Email người dùng</th>
                    <th>Ngày đặt hàng</th>
                    <th class="text-end">Tổng</th>
                    <th class="text-center">Số khóa học</th>
                </tr>
            </thead>
            <tbody id="orders-body">
                @foreach (var o in (IEnumerable<Order>)ViewBag.RecentOrders)
                {
                    <tr>
                        <td>@o.Id</td>
                        <td>@o.Email</td>
                        <td>@o.OrderDate.ToString("dd/MM/yyyy")</td>
                        <td class="text-end">@o.TotalAmount.ToString("N0") VND</td>
                        <td class="text-center">@o.OrderItems.Count</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <!-- ==== 3) PAGINATION ==== -->
    <nav aria-label="Page navigation" class="mt-3">
        <ul id="pagination" class="pagination justify-content-center mb-0"></ul>
    </nav>
</div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const labels  = @Html.Raw(Json.Serialize(ViewBag.MonthLabels));
            const rev     = @Html.Raw(Json.Serialize(ViewBag.MonthlyRevenue));
            const ords    = @Html.Raw(Json.Serialize(ViewBag.MonthlyOrders));

            // Sales chart
            new Chart(document.getElementById('salesChart').getContext('2d'), {
                type: 'line',
                data: {
                    labels, datasets: [{
                        label: 'Doanh thu',
                        data: rev,
                        borderColor: '#e53935',
                        backgroundColor: 'rgba(229,57,53,0.2)',
                        tension: 0.4, fill: true
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero:true, ticks:{ callback: v=>`$${v}` } }
                    }
                }
            });

            // Orders chart
            new Chart(document.getElementById('ordersChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels, datasets: [{
                        label: 'Đơn hàng',
                        data: ords,
                        backgroundColor: '#e53935'
                    }]
                },
                options: {
                    scales: {
                        y: { beginAtZero:true, ticks:{ stepSize:1 } }
                    }
                }
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
          const bodyEl = document.getElementById('orders-body');
          const pagEl  = document.getElementById('pagination');

          // 1) Khởi tạo dữ liệu từ DOM
          const initialRows = Array.from(bodyEl.querySelectorAll('tr'));
          const allOrders = initialRows.map(tr => {
            const [c0,c1,c2,c3,c4] = tr.querySelectorAll('td');
            return {
              Id:    c0.textContent.trim(),
              Email: c1.textContent.trim(),
              Date:  c2.textContent.trim().split('/').reverse().join('-'),
              Total: Number(c3.textContent.replace(/[^\d]/g, '')),
              Count: Number(c4.textContent.trim())
            };
          });

          // 2) State filter + paging
          let filteredList = [...allOrders];
          let currentPage  = 1;
          const pageSize   = 10;

          // 3) DOM refs filter UI
          const dfEl = document.getElementById('date-filter');
          const sdEl = document.getElementById('sort-date');
          const saEl = document.getElementById('sort-amount');
          const srEl = document.getElementById('order-search');
          const clearEl = document.getElementById('clear-filters');

          // 4) Hàm render tbody theo page
          function renderTable(list, page) {
            const start = (page - 1) * pageSize;
            const slice = list.slice(start, start + pageSize);
            bodyEl.innerHTML = slice.map(o => {
              const d  = new Date(o.Date);
              const dd = String(d.getDate()).padStart(2,'0');
              const mm = String(d.getMonth()+1).padStart(2,'0');
              const yy = d.getFullYear();
              const amt= o.Total.toLocaleString();
              return `
                <tr>
                  <td>${o.Id}</td>
                  <td>${o.Email}</td>
                  <td>${dd}/${mm}/${yy}</td>
                  <td class="text-end">${amt} VND</td>
                  <td class="text-center">${o.Count}</td>
                </tr>`;
            }).join('');
            renderPagination(list.length, page);
          }

          // 5) Hàm vẽ pagination
          function renderPagination(totalItems, page) {
            const pageCount = Math.ceil(totalItems / pageSize);
            let html = '';

            // Prev
            html += `<li class="page-item${page===1?' disabled':''}">
                       <a class="page-link" href="#" data-page="${page-1}">&laquo;</a>
                     </li>`;

            // Page numbers (chỉ hiển thị tối đa 5 số, logic đơn giản)
            const startPage = Math.max(1, page-2);
            const endPage   = Math.min(pageCount, page+2);
            for (let p = startPage; p <= endPage; p++) {
              html += `<li class="page-item${p===page?' active':''}">
                         <a class="page-link" href="#" data-page="${p}">${p}</a>
                       </li>`;
            }

            // Next
            html += `<li class="page-item${page===pageCount?' disabled':''}">
                       <a class="page-link" href="#" data-page="${page+1}">&raquo;</a>
                     </li>`;

            pagEl.innerHTML = html;

            // Gán event click
            Array.from(pagEl.querySelectorAll('a.page-link')).forEach(a => {
              a.addEventListener('click', e => {
                e.preventDefault();
                const np = Number(a.dataset.page);
                if (np >= 1 && np <= pageCount) {
                  currentPage = np;
                  renderTable(filteredList, currentPage);
                }
              });
            });
          }

          // 6) Hàm filter + sort + search
          function doFilter() {
            const now = new Date();
            const df  = dfEl.value;
            const sd  = sdEl.value;
            const sa  = saEl.value;
            const txt = srEl.value.trim().toLowerCase();

            filteredList = allOrders.filter(o => {
              // date filter
              if (df !== 'All') {
                const diff = Math.floor((now - new Date(o.Date)) / (1000*60*60*24));
                if (df==='Today'     && diff!==0) return false;
                if (df==='Last3Days' && diff>3)    return false;
                if (df==='Last7Days' && diff>7)    return false;
              }
              // text search
              if (txt) {
                return (`${o.Email}|${o.Id}`).toLowerCase().includes(txt);
              }
              return true;
            });

            // sort date
            filteredList.sort((a,b) => {
              const da=new Date(a.Date), db=new Date(b.Date);
              return sd==='Oldest'? da-db : db-da;
            });
            // sort amount
            if (sa==='HighLow')   filteredList.sort((a,b)=>b.Total - a.Total);
            if (sa==='LowHigh')   filteredList.sort((a,b)=>a.Total - b.Total);

            currentPage = 1;
            renderTable(filteredList, currentPage);
          }

          // 7) Gán sự kiện
          [dfEl, sdEl, saEl].forEach(el => el.addEventListener('change', doFilter));
          srEl.addEventListener('input', debounce(doFilter, 300));
          clearEl.addEventListener('click', () => {
            dfEl.value = 'All';
            sdEl.value = 'Newest';
            saEl.value = 'None';
            srEl.value = '';
            doFilter();
          });

          // 8) Utility debounce
          function debounce(fn, ms) {
            let t;
            return (...args) => {
              clearTimeout(t);
              t = setTimeout(()=> fn(...args), ms);
            };
          }

          // 9) Khởi tạo lần đầu
          doFilter();
        });
    </script>

    <script>
        document.getElementById('clear-filters')
          .addEventListener('click', () => {
            // Đặt về mặc định
            document.getElementById('date-filter').value   = 'All';
            document.getElementById('sort-date').value     = 'Newest';
            document.getElementById('sort-amount').value   = 'None';
            document.getElementById('order-search').value  = '';

            // Gọi lại hàm filter đã có
            applyFilters();
          });
    </script>


}
