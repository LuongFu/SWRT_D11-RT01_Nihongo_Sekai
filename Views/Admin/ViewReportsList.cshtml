@using JapaneseLearningPlatform.Data.Enums
@using JapaneseLearningPlatform.Models
@model List<Report>

@{
    ViewData["Title"] = "Quản lý Báo cáo";

    // Lấy dữ liệu từ ViewBag
    var subjectsCount = ((IEnumerable<dynamic>)ViewBag.Subjects ?? Enumerable.Empty<dynamic>())
                        .ToDictionary(x => (ReportSubject)x.Key, x => (int)x.Count);
    var totalAll      = subjectsCount.Values.Sum();

    var roles         = (string[])(ViewBag.Roles    ?? Array.Empty<string>());
    var statuses      = (string[])(ViewBag.Statuses ?? Array.Empty<string>());
    var currentSubj   = (string)(ViewBag.CurrentSubject ?? "");
    var currentRole   = (string)(ViewBag.CurrentRole    ?? "");
    var currentStat   = (string)(ViewBag.CurrentStatus  ?? "");
    var q             = (string)(ViewBag.Q              ?? "");
    var page          = (int)(ViewBag.Page     ?? 1);
    var pageSize      = (int)(ViewBag.PageSize ?? 10);
    var total         = (int)(ViewBag.Total    ?? 0);
    var totalPages    = (int)Math.Ceiling((double)total / pageSize);

    Func<ReportSubject, string> subjLabel = subj => subj switch {
        ReportSubject.Technical    => "Hỗ Trợ Kỹ Thuật",
        ReportSubject.Billing      => "Thanh Toán & Hóa Đơn",
        ReportSubject.Courses      => "Câu Hỏi Về Khóa Học",
        ReportSubject.Partnerships => "Đối Tác Doanh Nghiệp",
        ReportSubject.Feedback     => "Phản Hồi & Góp Ý",
        _                          => "Khác"
    };

    ReportSubject? currentEnum = null;
    if (Enum.TryParse<ReportSubject>(currentSubj, out var cs)) currentEnum = cs;
}

@section Styles {
  <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap" rel="stylesheet" />
  <style>
    body { font-family: "Source Sans Pro", sans-serif; }

    .container-fixed {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    h2.text-center {
      color: #ad1457;
      margin-bottom: 1.5rem;
      margin-top: 3%;
    }

    .filter-section {
      background: #fff1f1;
      padding: 1rem;
      border-radius: .5rem;
      margin-bottom: 1.5rem;
    }

    .btn-subject, .btn-subject:hover {
      margin: .25rem;
      padding: .5rem 1rem;
      border: 1px solid #f8bbd0;
      border-radius: .5rem;
      background: transparent;
      color: #ad1457;
      transition: all .2s;
    }
    .btn-subject.active {
      background: #f8bbd0;
      color: #880e4f;
    }

    .reports-table {
      background: #ffffff;
      border-radius: .5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.05);
      margin-bottom: 1.5rem;
    }
    .reports-table th, .reports-table td {
      vertical-align: middle;
    }

    .btn-info  { background-color: #29b6f6; border-color: #29b6f6; color: #fff; }
    .btn-success { background-color: #66bb6a; border-color: #66bb6a; color: #fff; }

    .pagination .page-item.active .page-link {
      background-color: #29b6f6;
      border-color: #29b6f6;
    }

    .filter-form .form-label {
      font-weight: 600;
      margin-bottom: .25rem;
    }

    .filter-actions {
      display: flex;
      justify-content: flex-end;
      align-items: flex-end;
    }
    .filter-actions .btn-clear {
      margin-left: 1rem;
    }
  </style>
}

<div class="container-fixed">
  <h2 class="text-center">@ViewData["Title"]</h2>

    <div aria-live="polite" aria-atomic="true"
         style="position: fixed; top:1rem; right:1rem; z-index:2000;">
        <div id="newReportToast" class="toast" role="alert" data-bs-delay="8000">
            <div class="toast-header bg-info text-white">
                <strong class="me-auto">Báo cáo mới (@ViewBag.NewCount)</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body p-2">
                <ul class="list-unstyled mb-1">
                    @foreach (var r in (IEnumerable<dynamic>)ViewBag.NewReports)
                    {
                        <li>
                            <a asp-action="Details" asp-route-id="@r.Id"
                               class="small text-decoration-none">
                                #@r.Id – @r.Subject
                            </a>
                        </li>
                    }
                </ul>
                <a href="@Url.Action("AdminIndex", new { status = "Unresolved" })"
                   class="small fw-bold">Xem tất cả →</a>
            </div>
        </div>
    </div>



  <!-- Filter Chủ Đề -->
  <div class="filter-section text-center">
    <button type="button"
            class="btn-subject @(currentSubj == "" ? "active" : "")"
            data-subject="">
      Tất cả (@totalAll)
    </button>
    @foreach (var subj in Enum.GetValues<ReportSubject>().Cast<ReportSubject>()) {
      var val = subj.ToString();
      var cnt = subjectsCount.ContainsKey(subj) ? subjectsCount[subj] : 0;
      <button type="button"
              class="btn-subject @(val == currentSubj ? "active" : "")"
              data-subject="@val">
        @subjLabel(subj) (@cnt)
      </button>
    }
  </div>

  <!-- Filter Vai Trò / Trạng Thái / Tìm kiếm + Clear -->
  <div class="filter-section">
  <div class="row gy-2 align-items-end filter-form">
    <!-- Vai Trò -->
    <div class="col-12 col-md-2">
      <label for="roleFilter" class="form-label">Vai Trò</label>
      <select id="roleFilter" class="form-select">
        <option value="">Tất cả</option>
        @foreach (var r in roles) {
          <option value="@r" @@(r == currentRole ? "selected" : "")>@r</option>
        }
      </select>
    </div>

    <!-- Trạng Thái -->
    <div class="col-12 col-md-2">
      <label for="statusFilter" class="form-label">Trạng Thái</label>
      <select id="statusFilter" class="form-select">
        <option value="">Tất cả</option>
        <option value="Đã Giải Quyết" @@(currentStat=="Đã Giải Quyết"?"selected":"")>Đã Giải Quyết</option>
        <option value="Đang Chờ"       @@(currentStat=="Đang Chờ"      ?"selected":"")>Đang Chờ</option>
      </select>
    </div>

    <!-- Thời gian -->
    <div class="col-12 col-md-2">
      <label for="dateFilter" class="form-label">Thời gian</label>
      <select id="dateFilter" class="form-select">
        <option value="">Tất cả</option>
        <option value="today" @@(ViewBag.CurrentDateFilter=="today"?"selected":"")>Hôm nay</option>
        <option value="3days" @@(ViewBag.CurrentDateFilter=="3days"?"selected":"")>3 ngày trước</option>
        <option value="7days" @@(ViewBag.CurrentDateFilter=="7days"?"selected":"")>7 ngày trước</option>
      </select>
    </div>

    <!-- Tìm kiếm -->
    <div class="col-12 col-md-4">
      <label for="search" class="form-label">Tìm kiếm</label>
      <input type="search"
             id="search"
             class="form-control"
             placeholder="Nhập email hoặc nội dung…"
             value="@q" />
    </div>

    <!-- Xóa bộ lọc -->
    <div class="col-12 col-md-2 text-end">
      <!-- đổi thành màu đỏ để nổi bật hơn -->
      <button id="clearFilters"
              class="btn btn-danger w-100">
        Xóa bộ lọc
      </button>
    </div>
  </div>
</div>


  <!-- Bảng Báo Cáo -->
  <table class="table table-hover reports-table">
    <thead class="table-light">
      <tr>
        <th>Id</th>
        <th>Email</th>
        <th>Chủ Đề</th>
        <th>Vai Trò</th>
        @if (currentEnum == ReportSubject.Billing) {
          <th>Mã Đơn Hàng</th>
        }
        <th>Ngày Gửi</th>
        <th>Trạng Thái</th>
        <th>Hành Động</th>
      </tr>
    </thead>
    <tbody id="reportsBody">
      @foreach (var r in Model) {
        <tr data-subject="@r.Subject"
            data-role="@r.Role"
            data-status="@(r.IsResolved ? "Đã Giải Quyết" : "Đang Chờ")"
            data-submitted="@r.SubmittedAt.ToString("yyyy-MM-dd")"
            data-search="@($"{r.Email} {r.Message}".ToLower())">
          <td>@r.Id</td>
          <td>@r.Email</td>
          <td>@subjLabel(r.Subject)</td>
          <td>@r.Role</td>
          @if (currentEnum == ReportSubject.Billing) {
            <td>@r.OrderNumber</td>
          }
          <td>@r.SubmittedAt.ToLocalTime():g</td>
            <td>@(r.IsResolved ? "Đã Giải Quyết" : "Đang Chờ")</td>
            <td>
                <a asp-action="Details" asp-route-id="@r.Id" class="btn btn-sm btn-info">
                    Xem
                </a>
                @if (!r.IsResolved)
                {
                    <!-- Nút mở modal “Trả lời” -->
                    <button type="button"
                            class="btn btn-sm btn-primary"
                            data-bs-toggle="modal"
                            data-bs-target="#respondModal-@r.Id">
                        Trả lời
                    </button>

                    <!-- Form Resolve (Hoàn thành) riêng biệt -->
                    <form asp-action="Resolve"
                            asp-controller="Reports"
                            method="post"
                            class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="id" value="@r.Id" />
                        <button type="submit" class="btn btn-sm btn-success">
                            Hoàn thành
                        </button>
                    </form>
                }
            </td>

        </tr>
      }
            <tr id="noResults" style="display:none">
                <td colspan="@(currentEnum == ReportSubject.Billing ? "7" : "6")" class="text-center text-muted">
                    Không tìm thấy báo cáo nào
                </td>
            </tr>
    </tbody>
  </table>

    @foreach (var r in Model)
    {
        <div class="modal fade" id="respondModal-@r.Id" tabindex="-1">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <form asp-action="Respond" asp-controller="Reports"
                      method="post" class="modal-content">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="reportId" value="@r.Id" />

                    <div class="modal-header">
                        <h5 class="modal-title">Soạn thư trả lời</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>

                    <div class="modal-body">
                        <!-- Chủ đề -->
                        <div class="mb-3">
                            <label class="form-label">Chủ đề</label>
                            <input type="text" name="subject" class="form-control"
                                   value="Phản hồi về báo cáo #@r.Id"
                                   required />
                        </div>

                        <!-- Preview + hidden body -->
                        <div class="mb-3">
                            <label class="form-label">Xem trước thư</label>
                            <div id="respondPreview-@r.Id"
                                 class="border rounded p-3"
                                 style="background:#fff; max-height:300px; overflow:auto;">
                                <p>Xin chào <strong>@r.FullName</strong>,</p>
                                <p>Chúng tôi đã nhận được báo cáo của bạn:</p>
                                <blockquote style="font-style:italic;color:#555;">
                                    "@r.Message"
                                </blockquote>
                                <div id="respondExtra-@r.Id"></div>
                                <hr />
                                <p>Trân trọng,<br />Nihongo Sekai Team</p>
                            </div>
                            <input type="hidden" name="body" id="hiddenRespondBody-@r.Id" />
                        </div>

                        <!-- Nội dung trả lời -->
                        <div class="mb-3">
                            <label class="form-label">Nội dung trả lời</label>
                            <textarea id="respondEditor-@r.Id"
                                  class="form-control"
                                  rows="4"
                                  placeholder="Viết lời cảm ơn hoặc hướng dẫn…"></textarea>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                                data-bs-dismiss="modal">
                            Hủy
                        </button>
                        <button type="submit" class="btn btn-primary">
                            Gửi trả lời & Đánh dấu hoàn thành
                        </button>
                    </div>
                </form>
            </div>
        </div>
    }

  <!-- Phân Trang -->
  <nav class="mb-5">
    <ul class="pagination justify-content-center">
      @for (int i = 1; i <= totalPages; i++) {
        <li class="page-item @(i == page ? "active" : "")">
          <a class="page-link"
             asp-action="AdminIndex"
             asp-route-page="@i"
             asp-route-subject="@currentSubj"
             asp-route-role="@currentRole"
             asp-route-status="@currentStat"
             asp-route-q="@q">
            @i
          </a>
        </li>
      }
    </ul>
  </nav>
</div>

@section Scripts {
    <script>
        // reload với query string (giữ nguyên để click vào Chủ Đề vẫn reload trang)
        function reload(role, status, query) {
          const subj = document.querySelector(".btn-subject.active")?.dataset.subject || "";
          const r    = role   ?? document.getElementById("roleFilter").value;
          const s    = status ?? document.getElementById("statusFilter").value;
          const q    = query  ?? "";
          window.location = `?subject=${subj}&role=${r}&status=${s}&q=${q}`;
        }

        // click filter Chủ Đề (vẫn dùng reload)
        document.querySelectorAll(".btn-subject").forEach(btn =>
          btn.addEventListener("click", e => {
            document.querySelectorAll(".btn-subject").forEach(b => b.classList.remove("active"));
            e.currentTarget.classList.add("active");
            reload();
          })
        );

        // Client–side filter cho Vai Trò / Trạng Thái / Thời gian / Live search
        function applyClientFilters() {
          const selSubj = document.querySelector(".btn-subject.active")?.dataset.subject || "";
          const selRole = document.getElementById("roleFilter").value;
          const selStat = document.getElementById("statusFilter").value;
          const selDate = document.getElementById("dateFilter").value;
          const txt     = document.getElementById("search").value.trim().toLowerCase();

          // Tính ngày cắt (cutoff) dựa trên selDate
          let cutoff = null;
          const today = new Date();
          if (selDate === "today") {
            cutoff = new Date(today.getFullYear(), today.getMonth(), today.getDate());
          } else if (selDate === "3days") {
            cutoff = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 3);
          } else if (selDate === "7days") {
            cutoff = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);
          }

          let anyVisible = false;

          document.querySelectorAll("#reportsBody tr").forEach(tr => {
            // Bỏ qua hàng thông báo "No Results"
            if (tr.id === "noResults") return;

            const subj      = tr.dataset.subject;
            const role      = tr.dataset.role;
            const stat      = tr.dataset.status;
            const submitted = tr.dataset.submitted; // "YYYY-MM-DD"
            const hay       = tr.dataset.search;

            // Kiểm tra khoảng thời gian
            let dateOk = true;
            if (cutoff) {
              const d = new Date(submitted);
              dateOk = d >= cutoff;
            }

            // Kết hợp tất cả điều kiện lọc
            const ok =
              (!selSubj || subj === selSubj) &&
              (!selRole || role === selRole) &&
              (!selStat || stat === selStat) &&
              dateOk &&
              (!txt    || hay.includes(txt));

            tr.style.display = ok ? "" : "none";
            if (ok) anyVisible = true;
          });

          // Hiển thị hoặc ẩn hàng "No Results"
          document.getElementById("noResults").style.display = anyVisible ? "none" : "";
        }

        document.addEventListener("DOMContentLoaded", () => {
          // Lắng nghe thay đổi các filter
          document.getElementById("roleFilter")
            .addEventListener("change", applyClientFilters);
          document.getElementById("statusFilter")
            .addEventListener("change", applyClientFilters);
          document.getElementById("dateFilter")
            .addEventListener("change", applyClientFilters);

          // Live search với độ trễ debounce
          const searchInput = document.getElementById("search");
          let debounceTimer;
          searchInput.addEventListener("input", () => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(applyClientFilters, 200);
          });

          // Clear tất cả filter (giữ lại subject đang active)
          document.getElementById("clearFilters")
            .addEventListener("click", () => {
              document.getElementById("roleFilter").value   = "";
              document.getElementById("statusFilter").value = "";
              document.getElementById("dateFilter").value   = "";
              searchInput.value = "";
              applyClientFilters();
            });

          // Chạy lần đầu để đồng bộ theo giá trị mặc định
          applyClientFilters();

           const toastEl      = document.getElementById("newReportToast");
        // Xuất đúng boolean & số
        const toastEnabled = @Json.Serialize(ViewBag.EnableNewReportToast ?? false);
        let   lastCount    = @Json.Serialize(ViewBag.NewCount ?? 0);
        const badgeApiUrl  = "@Url.Action("GetUnresolvedCounts", "Reports")";

        // 1) Hiển thị toast ngay khi load nếu feature on và count > 0
        if (toastEnabled && lastCount > 0) {
          new bootstrap.Toast(toastEl).show();
        }

        // 2) Polling mỗi 60s
        setInterval(async () => {
          try {
            const res  = await fetch(badgeApiUrl);
            if (!res.ok) return;
            const data = await res.json();     // { total, bySubj }

            if (data.total > lastCount) {
              lastCount = data.total;

              // Cập nhật số hiển thị trong toast
              document.getElementById("toast-count").innerText = lastCount;
              document.getElementById("toast-count-2").innerText = lastCount;

              // Show toast
              new bootstrap.Toast(toastEl).show();

              // (Nếu cần) reload page list để cập nhật bảng
              // if (window.location.pathname.endsWith("/Reports/AdminIndex"))
              //   window.location.reload();
            }
          } catch (e) {
            console.error("checkNewReports error:", e);
          }
        }, 60000);
              // == Kết thúc phần toast ==
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', ()=>{
          @foreach (var r in Model)
        {
                <text>
                // —— Respond modal ——
                (function(){
                  var editor   = document.getElementById('respondEditor-@r.Id');
                  var extraDiv = document.getElementById('respondExtra-@r.Id');
                  var preview  = document.getElementById('respondPreview-@r.Id');
                  var hidden   = document.getElementById('hiddenRespondBody-@r.Id');
                  var form     = document.querySelector('#respondModal-@r.Id form');

                  // live update phần bổ sung
                  editor.addEventListener('input', function(){
                    extraDiv.innerHTML = this.value
                      .split('\n').map(l=>`<p>${l}</p>`).join('');
                  });

                  // trước khi submit, gom toàn bộ preview HTML
                  form.addEventListener('submit', function(){
                    hidden.value = preview.innerHTML;
                  });
                })();
                </text>
          }
        });
    </script>

}


