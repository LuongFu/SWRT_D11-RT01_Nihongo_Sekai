@using JapaneseLearningPlatform.Data.Enums
@using JapaneseLearningPlatform.Data.ViewModels
@model QuizQuestionFormVM
@{
    ViewData["Title"] = Model.QuestionId.HasValue ? "Edit Question" : "Create Question";
    var isEdit = Model.QuestionId.HasValue;
}

<div class="container py-4">
    <h2 class="text-danger fw-bold mb-4">@ViewData["Title"]</h2>

    <form asp-action="Save" method="post" class="border rounded p-4 shadow-sm bg-white">
        @Html.AntiForgeryToken()

        <input type="hidden" asp-for="QuestionId" />
        <input type="hidden" asp-for="QuizId" />

        <div class="mb-3">
            <label asp-for="QuestionText" class="form-label fw-semibold text-dark">Question</label>
            <input asp-for="QuestionText" class="form-control border border-danger" />
            <span asp-validation-for="QuestionText" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="QuestionType" class="form-label fw-semibold text-dark">Question Type</label>
            <select asp-for="QuestionType" class="form-select border border-danger" asp-items="Html.GetEnumSelectList<QuestionType>()"></select>
        </div>

        <hr />
        <h5 class="fw-bold text-danger">Answer Options</h5>

        <div id="option-list">
            @for (int i = 0; i < Model.Options.Count; i++)
            {
                <div class="border rounded p-3 mb-3 bg-light">
                    <input type="hidden" asp-for="Options[@i].OptionId" />
                    <div class="mb-2">
                        <label class="form-label">Option Text</label>
                        <input asp-for="Options[@i].OptionText" class="form-control border border-secondary" />
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" asp-for="Options[@i].IsCorrect" />
                        <label class="form-check-label">Correct Answer</label>
                    </div>
                    <button type="button" class="btn btn-outline-danger btn-sm mt-2" onclick="removeOption(this)">Remove</button>
                </div>
            }
        </div>

        <button type="button" class="btn btn-outline-secondary mt-3" onclick="addOption()">+ Add Option</button>

        <div class="mt-4 d-flex gap-3">
            <button type="submit" class="btn btn-danger px-4">Save</button>
            <a asp-action="Manage" asp-controller="Quizzes" asp-route-id="@Model.QuizId" class="btn btn-outline-dark">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function addOption() {
            const index = document.querySelectorAll('#option-list .border').length;
            const container = document.createElement('div');
            container.className = 'border rounded p-3 mb-3 bg-light';
            container.innerHTML = `
                <input type="hidden" name="Options[${index}].OptionId" value="0" />
                <div class="mb-2">
                    <label class="form-label">Option Text</label>
                    <input name="Options[${index}].OptionText" class="form-control border border-secondary" />
                </div>
                <div class="form-check">
                    <input type="checkbox" name="Options[${index}].IsCorrect" class="form-check-input" />
                    <label class="form-check-label">Correct Answer</label>
                </div>
                <button type="button" class="btn btn-outline-danger btn-sm mt-2" onclick="removeOption(this)">Remove</button>
            `;
            document.getElementById('option-list').appendChild(container);
        }

        function removeOption(btn) {
            btn.closest('.border').remove();
        }
    </script>
}
