@model IEnumerable<ApplicationUser>

@{
    ViewData["Title"] = "Danh sách tất cả người dùng";
}

@section Styles {
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap" rel="stylesheet" />

    <style>
        /* ========== NỀN CHUNG ========== */
        body {
            margin: 0;
            font-family: 'Source Sans Pro', sans-serif;
            background: linear-gradient(135deg, #f6f5f3 0%, #e8e7e3 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            color: #4a4a4a;
        }

        /* ========== HEADER & CONTAINER ========== */
        .container {
            flex: 1 0 auto;
            max-width: 1100px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        h4 {
            color: #5a5a5a;
            text-shadow: none;
            margin-bottom: 1rem;
        }

        /* ========== FILTER BAR ========== */
        .filter-card {
            background: #ffffff;
            border-radius: 0.75rem;
            padding: 0.75rem;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
            margin-bottom: 1.5rem;
        }

        .filter-bar {
            display: flex;
            gap: 0.75rem;
            align-items: center;
            overflow-x: auto;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            .filter-bar::-webkit-scrollbar {
                display: none;
            }

            .filter-bar input,
            .filter-bar select {
                flex: 1;
                min-width: 140px;
                padding: 0.5rem 0.75rem;
                border: 1px solid #dcdcdc;
                border-radius: 0.5rem;
                transition: box-shadow 0.2s, border-color 0.2s;
            }

                .filter-bar input:focus,
                .filter-bar select:focus {
                    border-color: #c9b7d4;
                    box-shadow: 0 0 4px rgba(201,183,212,0.3);
                    outline: none;
                }

            .filter-bar button {
                background-color: #a391b8;
                border: none;
                color: #fff;
                padding: 0.5rem 1rem;
                border-radius: 0.5rem;
                cursor: pointer;
                transition: background 0.2s;
            }

                .filter-bar button:hover {
                    background-color: #9180a2;
                }

        /* ========== BẢNG DỮ LIỆU ========== */
        .table-wrapper {
            background: #ffffff;
            border-radius: 0.75rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.04);
            overflow: hidden;
            margin-bottom: 2rem;
        }

        #usersTable {
            width: 100%;
            border-collapse: separate;
        }

            #usersTable thead th {
                background-color: #f0eef0;
                color: #5a5a5a;
                position: sticky;
                top: 0;
                z-index: 1;
                padding: 0.75rem;
                border-bottom: 1px solid #e0e0e0;
            }

            #usersTable tbody tr {
                transition: background 0.2s;
            }

                #usersTable tbody tr:nth-child(odd) {
                    background-color: #faf9fa;
                }

                #usersTable tbody tr:hover {
                    background-color: #f4f2f5;
                }

            #usersTable td {
                padding: 0.75rem;
                border-bottom: 1px solid #f0f0f0;
            }

        /* ========== FOOTER ========== */
        footer {
            flex-shrink: 0;
            background: #5a4f6e;
            color: #f2f0f4;
            text-align: center;
            padding: 0.75rem 0;
        }

            footer a {
                color: #d1c9dd;
                text-decoration: none;
            }

                footer a:hover {
                    text-decoration: underline;
                }
    </style>

}

<div class="container">
    <h4 class="mb-3">Danh sách tất cả người dùng</h4>

    <div class="filter-card">
        <div class="filter-bar">
            <input type="text" id="searchName" class="form-control" placeholder="Tìm theo tên..." />

            <select id="sortOrder" class="form-select">
                <option value="">Tất cả</option>
                <option value="asc">A → Z</option>
                <option value="desc">Z → A</option>
            </select>

            <select id="filterRole" class="form-select">
                <option value="">Tất cả vai trò</option>
                <option value="Learner">Learner</option>
                <option value="Partner">Partner</option>
                <option value="Admin">Admin</option>
            </select>

            <select id="filterStatus" class="form-select">
                <option value="">Tất cả trạng thái</option>
                <option value="Hoạt động">Hoạt động</option>
                <option value="Bị cấm">Bị cấm</option>
            </select>

            <button id="resetFilters">Xóa bộ lọc</button>
        </div>
    </div>

    <div class="table-wrapper">
        <table class="table text-center" id="usersTable">
            <thead>
                <tr>
                    <th>Full Name</th>
                    <th>UserName</th>
                    <th>Email</th>
                    <th>Vai trò</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-name="@item.FullName.ToLower()"
                        data-role="@item.Role"
                        data-status="@(item.IsBanned ? "Bị cấm" : "Hoạt động")">
                        <td>@item.FullName</td>
                        <td>@item.UserName</td>
                        <td>@item.Email</td>
                        <td>@item.Role</td>
                        <td>
                            @if (item.IsBanned)
                            {
                                <span class="text-danger fw-bold">Bị cấm</span>
                            }
                            else
                            {
                                <span class="text-success fw-bold">Hoạt động</span>
                            }
                        </td>
                        <td>
                            @if (item.Role != "Admin")
                            {
                                <form asp-action="ToggleBan" asp-route-id="@item.Id" method="post">
                                    <button type="submit"
                                            class="btn @(item.IsBanned ? "btn-success" : "btn-danger") btn-sm">
                                        @(item.IsBanned ? "Bỏ cấm" : "Cấm")
                                    </button>
                                </form>
                            }
                            else
                            {
                                <span class="text-muted">Được bảo vệ</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <!-- PHÂN TRANG -->
        <nav aria-label="User pagination">
            <ul class="pagination">
                @for (int p = 1; p <= ViewBag.TotalPages; p++)
                {
                    <li class="page-item @(p == ViewBag.CurrentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { page = p })">@p</a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<footer>
    <a href="@Url.Action("Index", "Home")">Về trang chủ</a>
</footer>

@section Scripts {
    <script>
        (function() {
            const searchInput = document.getElementById('searchName');
            const sortSelect  = document.getElementById('sortOrder');
            const roleSelect  = document.getElementById('filterRole');
            const statusSelect= document.getElementById('filterStatus');
            const resetBtn    = document.getElementById('resetFilters');
            const tbody       = document.querySelector('#usersTable tbody');

            function applyFilters() {
                const search = searchInput.value.toLowerCase();
                const sortDir = sortSelect.value;
                const roleF   = roleSelect.value;
                const statusF = statusSelect.value;

                // Lọc
                Array.from(tbody.rows).forEach(row => {
                    const name   = row.dataset.name;
                    const role   = row.dataset.role;
                    const status = row.dataset.status;
                    const okSearch = !search || name.includes(search);
                    const okRole   = !roleF   || role === roleF;
                    const okStatus = !statusF || status === statusF;
                    row.style.display = (okSearch && okRole && okStatus) ? '' : 'none';
                });

                // Sắp xếp nếu có chọn
                if (sortDir) {
                    const vis = Array.from(tbody.rows)
                        .filter(r => r.style.display === '')
                        .sort((a,b) => {
                            const na = a.dataset.name;
                            const nb = b.dataset.name;
                            return sortDir === 'asc'
                                ? na.localeCompare(nb)
                                : nb.localeCompare(na);
                        });
                    vis.forEach(r => tbody.appendChild(r));
                }
            }

            [searchInput, sortSelect, roleSelect, statusSelect]
                .forEach(el => el.addEventListener('change', applyFilters));
            searchInput.addEventListener('input', applyFilters);

            resetBtn.addEventListener('click', () => {
                searchInput.value = '';
                sortSelect.value  = '';
                roleSelect.value  = '';
                statusSelect.value= '';
                applyFilters();
            });

            applyFilters();

              [sortSelect, roleSelect, statusSelect].forEach(el => {
          el.addEventListener('mouseenter', () => el.focus());
          el.addEventListener('mouseleave', () => el.blur());
        });

        })();
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
          const rowsPerPage = 10;
          const tbody = document.querySelector('#usersTable tbody');
          const allRows = Array.from(tbody.querySelectorAll('tr'));
          const totalPages = Math.ceil(allRows.length / rowsPerPage);

          // Tạo vùng phân trang
          const nav = document.createElement('nav');
          const ul  = document.createElement('ul');
          ul.className = 'pagination justify-content-center mt-3';
          nav.appendChild(ul);

          // Hàm hiển thị trang
          function showPage(page) {
            // ẩn/hiện các dòng
            allRows.forEach((row, idx) => {
              const start = (page - 1) * rowsPerPage;
              row.style.display = idx >= start && idx < start + rowsPerPage ? '' : 'none';
            });
            // cập nhật active
            ul.querySelectorAll('li').forEach(li => li.classList.remove('active'));
            ul.querySelector(`li[data-page="${page}"]`).classList.add('active');
          }

          // Sinh các nút page
          for (let p = 1; p <= totalPages; p++) {
            const li = document.createElement('li');
            li.className = 'page-item';
            li.dataset.page = p;
            li.innerHTML = `<a class="page-link" href="#">${p}</a>`;
            li.addEventListener('click', e => {
              e.preventDefault();
              showPage(p);
            });
            ul.appendChild(li);
          }

          // Chèn phân trang sau bảng
          document.querySelector('.table-wrapper').appendChild(nav);

          // Khởi đầu hiển thị trang 1
          if (totalPages > 0) showPage(1);
        });
    </script>
}
