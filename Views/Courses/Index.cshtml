@using JapaneseLearningPlatform.Data.ViewModels
@using JapaneseLearningPlatform.Data.Static
@using JapaneseLearningPlatform.Data
@using JapaneseLearningPlatform.Data.Enums;

@model IEnumerable<CourseWithPurchaseVM>

@{
    ViewData["Title"] = "Danh sách khóa học";
    ViewData["HideNavbar"] = false;
    ViewData["HideFooter"] = false;

    var currentUser = User.Identity.IsAuthenticated;
    var isAdmin = User.IsInRole(UserRoles.Admin);
}
@section Styles {
    <!-- Google Fonts -->
    <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700;800&display=swap"
        rel="stylesheet"
    />

    <link
        rel="stylesheet"
        href="~/css/styles.css"
        asp-append-version="true"
    />

    <!-- Page-specific CSS -->
    <link rel="stylesheet" href="~/css/courses.css" />
    <link rel="stylesheet" href="~/css/footer.css" />
    <style>
       /* Container pill-style */
        .pagination {
          display: flex !important;
          justify-content: center;
          align-items: center;
          gap: 0.5rem;
          margin-top: 2rem;
          padding-left: 0;
          list-style: none;
        }

        /* Các nút số */
        .pagination .page-item {
          /* giữ nguyên cấu trúc để Bootstrap không can thiệp */
        }
        .pagination .page-item .page-link {
          padding: 0.5rem 0.75rem;
          border-radius: 999px;
          background: var(--bs-gray-100);
          color: var(--bs-gray-700);
          font-weight: 500;
          transition: background 0.2s, box-shadow 0.2s;
          border: none;
        }

        /* Hover hiệu ứng */
        .pagination .page-item .page-link:hover {
          background: var(--bs-gray-200);
          box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        }

        /* Nút active */
        .pagination .page-item.active .page-link {
          background: var(--bs-primary) !important;
          color: #fff !important;
          box-shadow: 0 2px 6px rgba(0,0,0,0.15);
        }

        /* Disable (nếu có prev/next) */
        .pagination .page-item.disabled .page-link {
          opacity: 0.5;
          cursor: default;
          background: #fff;
        }
    </style>
}

@section Scripts {
    <script
        src="~/js/script.js"
        asp-append-version="true">
    </script>
    <script src="~/js/wordOfTheDay.js"></script>
}
<!-- Enhanced Hero Section with Gradient & Sakura Petals -->
@if (!currentUser)
{
<section class="enhanced-hero">
    <div class="sakura-container" id="sakuraContainer">
        @* Sakura petals will be generated by JavaScript *@
    </div>

    <div class="container animate-on-scroll">
        <div class="enhanced-hero-content">
            <h1 class="enhanced-hero-title">
                Làm chủ Tiếng Nhật
            </h1>
            <p class="enhanced-hero-subtitle">
                Discover our comprehensive collection of Japanese courses designed
                by experts. From complete beginners to advanced learners, find
                your perfect learning path with our structured curriculum.
            </p>

            <div class="enhanced-hero-stats">
                <div class="enhanced-stat">
                    <span class="enhanced-stat-number">12+</span>
                    <span class="enhanced-stat-label">Expert Courses</span>
                </div>
                <div class="enhanced-stat">
                    <span class="enhanced-stat-number">5,000+</span>
                    <span class="enhanced-stat-label">Active Students</span>
                </div>
                <div class="enhanced-stat">
                    <span class="enhanced-stat-number">4.9</span>
                    <span class="enhanced-stat-label">Average Rating</span>
                </div>
            </div>
        </div>
    </div>
</section>
}
<!-- Courses Section -->
<div class="container mt-4 animate-on-scroll">
    <h2 class="fw-bold mb-4 text-center">Khám phá khóa học</h2>
</div>
<div id="wordOfTheDayContainer"></div>
<div class="container animate-on-scroll">
    <div class="mb-4">
     <form asp-action="Filter" method="get" class="row g-2 align-items-center">
        <div class="col-auto">
            <label class="form-label mb-0">Phân loại:</label>
        </div>
<div class="col-auto">
    <select name="selectedCategory" class="form-select">
        <option value="">Chọn loại...</option>
        @foreach (CourseCategory category in Enum.GetValues(typeof(CourseCategory)))
        {
            var isSelected = ViewBag.SelectedCategory != null && category.ToString() == ViewBag.SelectedCategory.ToString();
            var selectedAttr = isSelected ? "selected" : "";
            @: <option value="@category" @selectedAttr>@category.GetDisplayName()</option>
        }
    </select>
</div>


        <!-- Price Filter -->
        <div class="col-auto">
            <label class="form-label mb-0">Khoảng giá tiền:</label>
        </div>
        <div class="col-auto">
            <select id="priceFilter" name="minPrice" class="form-select">
                @{
                    // Tạo list tạm ngay trong view cho ví dụ
                    var priceOptions = new[]
                    {
                        new { Value = (int?)null, Text = "Chọn khoảng giá tiền..." },
                        new { Value = (int?)0, Text = "Dưới 100.000₫" },
                        new { Value = (int?)101000, Text = "101.000–500.000₫" },
                        new { Value = (int?)501000, Text = "501.000–1.000.000₫" },
                        new { Value = (int?)1000001, Text = "Trên 1.000.000₫" }
                    };
                }

                @foreach (var opt in priceOptions)
                {
                    // Xác định xem có đang được chọn hay không
                    var isSelected = (ViewBag.MinPrice == null && opt.Value == null)
                                      || (ViewBag.MinPrice != null && opt.Value != null && (int)ViewBag.MinPrice == opt.Value);
                    var selectedAttr = isSelected ? "selected" : "";
                    @:<option value="@(opt.Value?.ToString() ?? "")" @selectedAttr>@opt.Text</option>
                }
            </select>
        </div>

        <div class="col-auto">
            <input type="text" name="searchString" class="form-control" placeholder="Tìm kiếm theo tên..." value="@ViewBag.SearchString" />
        </div>        

        <div class="col-auto">
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-funnel"></i> Áp dụng bộ lọc
            </button>
        </div>
    </form>
</div>

    <div class="row row-cols-1 row-cols-md-3 g-4 animate-on-scroll">
        @foreach (var item in Model)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-0">
                    <img src="@item.Course.ImageURL" class="card-img-top" alt="@item.Course.Name" style="object-fit: cover; height: 200px;">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@item.Course.Name</h5>
                        <p class="card-text">@item.Course.Description?.Substring(0, Math.Min(100, item.Course.Description.Length))...</p>
                        <p>
                            <strong>Loại:</strong> @item.Course.CourseCategory.GetDisplayName() <br />
                            @if (item.DiscountPercent != null && item.Course.StartDate <= DateTime.Now && item.Course.EndDate >= DateTime.Now)
                            {
                            <p class="text-danger">
                                <del>@item.Course.Price.ToString("N0") ₫</del>
                                <strong>@item.Course.FinalPrice.ToString("N0") ₫</strong>
                                <span class="badge bg-danger text-white">@item.Course.DiscountPercent% OFF</span>
                            </p>
                        }
                        else
                        {
                            <p><strong>@item.Course.Price.ToString("N0") ₫</strong></p>
                        }
                        </p>
                        <div class="mt-auto">
                            @if (!isAdmin)
                            {
                                if (item.IsPurchased)
                                {
                                    <a asp-controller="Courses" asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-danger w-100 mt-2">
                                    <i class="bi bi-play-btn"></i> Bắt đầu học
                                </a>
                                }
                                else if (item.IsInCart)
                                {
                                    <a asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-outline-primary w-100">
                                <i class="bi bi-info-circle"></i> Chi tiết
                            </a>
                                    <button asp-controller="Orders" asp-action="ShoppingCart" class="btn btn-warning w-100 mt-2 disabled">
                                        <i class="bi bi-cart-check"></i> Trong giỏ hàng
                                    </button>
                                }
                                else
                                {
                                    <a asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-outline-primary w-100">
                                <i class="bi bi-info-circle"></i> Chi tiết
                            </a>
                                    <a asp-controller="Orders" asp-action="AddItemToShoppingCart" asp-route-id="@item.Course.Id"
                                       class="btn btn-danger w-100 mt-2">
                                        <i class="bi bi-cart-plus"></i> Thêm vào giỏ hàng
                                    </a>
                                }
                            }
                            @if (isAdmin)
                            {
                                <a asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-outline-primary w-100">
                                <i class="bi bi-info-circle"></i> Chi tiết
                            </a>
                                <div class="d-flex gap-2 mt-3">
                                    <a asp-action="Edit" asp-route-id="@item.Course.Id" class="btn btn-sm btn-outline-warning w-50">
                                        <i class="bi bi-pencil-square"></i> Sửa
                                    </a>
                                    <form asp-action="DeleteConfirmed" asp-route-id="@item.Course.Id" method="post" class="w-50">
                                        <button type="submit" class="btn btn-sm btn-outline-danger w-100"
                                                onclick="return confirm('Are you sure you want to delete this course?');">
                                            <i class="bi bi-trash"></i> Xóa
                                        </button>
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @await Html.PartialAsync("_CreateItem", "Courses")


    <!-- @* Pagination *@ -->
    <div class="mt-4 text-center">
      <nav>
        <ul class="pagination justify-content-center">
          @for (int i = 1; i <= ViewBag.TotalPages; i++)
          {
            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
              <a class="page-link" asp-action="Index" asp-route-page="@i">@i</a>
            </li>
          }
        </ul>
      </nav>
    </div>
</div>

<!-- Enhanced Scripts -->
<script src="~/js/script.js" asp-append-version="true"></script>
<script>
  // Enhanced Courses Page Functionality
  document.addEventListener("DOMContentLoaded", function () {
    // Initialize sakura petals animation
    initializeSakuraPetals();

    let filteredCourses = [...courses];
    let currentPage = 1;
    const coursesPerPage = 6;
    const userPurchases = ["1", "4"]; // Mock purchased courses

    // Initialize page
    initializePage();

    function initializePage() {
      renderCourses();
      setupEventListeners();
      updateResultsCount();
      setupPagination();
      setupAutocomplete();
    }

    function initializeSakuraPetals() {
      const sakuraContainer = document.getElementById("sakuraContainer");
      // Create 9 sakura petals
      for (let i = 1; i <= 100; i++) {
        const petal = document.createElement("div");
        petal.className = "sakura-petal";
        sakuraContainer.appendChild(petal);
      }
    }

    function setupEventListeners() {
      setupFilterHoverBehavior();
      document
        .getElementById("categoryFilter")
        .addEventListener("change", handleFilters);
      document
        .getElementById("levelFilter")
        .addEventListener("change", handleFilters);
      document
        .getElementById("priceFilter")
        .addEventListener("change", handleFilters);
      document
        .getElementById("sortFilter")
        .addEventListener("change", handleFilters);

      document
        .getElementById("clearFilters")
        .addEventListener("click", clearAllFilters);

      document.querySelectorAll(".filter-pill select").forEach((select) => {
        select.addEventListener("change", updateFilterChipState);
      });     
    }

    function setupFilterHoverBehavior() {
      document.querySelectorAll(".filter-pill").forEach((pill) => {
        const select = pill.querySelector("select");
        pill.addEventListener("mouseenter", () => {
          if (select && !select.disabled) {
            select.focus();
          }
        });
      });
    }

    function handleSearch(e) {
      const searchTerm = e.target.value.toLowerCase();
      filteredCourses = courses.filter(
        (course) =>
          course.title.toLowerCase().includes(searchTerm) ||
          course.description.toLowerCase().includes(searchTerm) ||
          course.category.toLowerCase().includes(searchTerm)
      );
      applyFiltersAndSort();
      currentPage = 1;
      renderCourses();
      updateResultsCount();
      setupPagination();
    }

    function handleFilters() {
      applyFiltersAndSort();
      currentPage = 1;
      renderCourses();
      updateResultsCount();
      setupPagination();
      updateClearButton();
    }

    function applyFiltersAndSort() {
      const category = document.getElementById("categoryFilter").value;
      const level = document.getElementById("levelFilter").value;
      const priceRange = document.getElementById("priceFilter").value;
      const sortBy = document.getElementById("sortFilter").value;

      filteredCourses = courses.filter((course) => {
        const matchesSearch =
          !document.getElementById("courseSearch").value ||
          course.title
            .toLowerCase()
            .includes(document.getElementById("courseSearch").value.toLowerCase()) ||
          course.description
            .toLowerCase()
            .includes(document.getElementById("courseSearch").value.toLowerCase());

        const matchesCategory = !category || course.category === category;
        const matchesLevel = !level || course.level === level;

        let matchesPrice = true;
        if (priceRange) {
          const [min, max] = priceRange
            .split("-")
            .map((p) => (p === "+" ? Infinity : parseInt(p)));
          matchesPrice = course.price >= min && (max === undefined || course.price <= max);
        }

        return matchesSearch && matchesCategory && matchesLevel && matchesPrice;
      });

      switch (sortBy) {
        case "rating":
          filteredCourses.sort((a, b) => b.rating - a.rating);
          break;
        case "newest":
          filteredCourses.sort((a, b) => b.id - a.id);
          break;
        case "price-low":
          filteredCourses.sort((a, b) => a.price - b.price);
          break;
        case "price-high":
          filteredCourses.sort((a, b) => b.price - a.price);
          break;
        default: // popular
          filteredCourses.sort((a, b) => b.students - a.students);
      }
    }

    function clearAllFilters() {
      document.getElementById("courseSearch").value = "";
      document.getElementById("categoryFilter").value = "";
      document.getElementById("levelFilter").value = "";
      document.getElementById("priceFilter").value = "";
      document.getElementById("sortFilter").value = "popular";

      filteredCourses = [...courses];
      applyFiltersAndSort();
      currentPage = 1;
      renderCourses();
      updateResultsCount();
      setupPagination();
      updateClearButton();
      updateFilterChipStates();
    }

    function updateFilterChipState(e) {
      const pill = e.target.closest(".filter-pill");
      if (e.target.value) {
        pill.classList.add("active");
      } else {
        pill.classList.remove("active");
      }
      updateClearButton();
    }

    function updateFilterChipStates() {
      document.querySelectorAll(".filter-pill").forEach((pill) => {
        const select = pill.querySelector("select");
        if (select.value) {
          pill.classList.add("active");
        } else {
          pill.classList.remove("active");
        }
      });
    }

    function updateClearButton() {
      const hasActiveFilters =
        document.getElementById("courseSearch").value ||
        document.getElementById("categoryFilter").value ||
        document.getElementById("levelFilter").value ||
        document.getElementById("priceFilter").value ||
        document.getElementById("sortFilter").value !== "popular";

      const clearBtn = document.getElementById("clearFilters");
      if (hasActiveFilters) {
        clearBtn.classList.add("visible");
      } else {
        clearBtn.classList.remove("visible");
      }
    }

    function setupAutocomplete() {
      if (window.NihongoSekai && window.NihongoSekai.setupAutocomplete) {
        window.NihongoSekai.setupAutocomplete();
      }
    }

    function renderCourses() {
      const startIndex = (currentPage - 1) * coursesPerPage;
      const endIndex = startIndex + coursesPerPage;
      const coursesToShow = filteredCourses.slice(startIndex, endIndex);

      const gridContainer = document.getElementById("coursesGrid");
      gridContainer.innerHTML = coursesToShow
        .map((course) => {
          const isPurchased = userPurchases.includes(course.id.toString());
          return `
            <div class="enhanced-card" data-course-id="${course.id}">
              <div class="enhanced-card-image">
                <img src="${course.image}" alt="${course.title}" loading="lazy" />
                <div class="level-badge">${course.level}</div>
                ${isPurchased ? '<div class="purchased-badge">Purchased</div>' : ""}
                <div class="card-overlay">
                  <a href="course-detail.html?id=${course.id}" class="overlay-button">
                    View Details
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="9,18 15,12 9,6"></polyline>
                    </svg>
                  </a>
                </div>
              </div>
              <div class="enhanced-card-content">
                <h3 class="enhanced-card-title">${course.title}</h3>
                <p class="enhanced-card-description">${course.description}</p>
                <div class="instructor-info" onclick="viewInstructorProfile('${course.instructor}')">
                  <div class="instructor-avatar">
                    ${course.instructor
                      .split(" ")
                      .map((n) => n[0])
                      .join("")}
                  </div>
                  <span class="instructor-name">${course.instructor}</span>
                </div>
                <div class="card-stats">
                  <div class="stats-left">
                    <div class="stat-item">
                      <span>📹 ${course.lessons} lessons</span>
                    </div>
                    <div class="stat-item">
                      <span>👥 ${course.students.toLocaleString()}</span>
                    </div>
                  </div>
                  <div class="rating-display">
                    <div class="stars">${generateStars(course.rating)}</div>
                    <span>${course.rating}</span>
                  </div>
                </div>
              </div>
            </div>
          `;
        })
        .join("");
    }

    function generateStars(rating) {
      const fullStars = Math.floor(rating);
      const hasHalfStar = rating % 1 >= 0.5;
      let stars = "";

      for (let i = 0; i < fullStars; i++) {
        stars += "★";
      }
      if (hasHalfStar) {
        stars += "☆";
      }
      return stars;
    }

    function updateResultsCount() {
      const count = filteredCourses.length;
      const countElement = document.getElementById("resultsCount");
      countElement.textContent = `${count} ${count === 1 ? "course" : "courses"} found`;
    }

    function setupPagination() {
      const totalPages = Math.ceil(filteredCourses.length / coursesPerPage);
      const paginationNumbers = document.getElementById("paginationNumbers");
      const prevBtn = document.getElementById("prevPage");
      const nextBtn = document.getElementById("nextPage");

      prevBtn.disabled = currentPage === 1;
      nextBtn.disabled = currentPage === totalPages || totalPages === 0;

      paginationNumbers.innerHTML = "";
      for (let i = 1; i <= totalPages; i++) {
        const pageBtn = document.createElement("button");
        pageBtn.textContent = i;
        pageBtn.className = `pagination-number ${i === currentPage ? "active" : ""}`;
        pageBtn.addEventListener("click", () => goToPage(i));
        paginationNumbers.appendChild(pageBtn);
      }

      prevBtn.onclick = () => goToPage(currentPage - 1);
      nextBtn.onclick = () => goToPage(currentPage + 1);
    }

    function goToPage(page) {
      const totalPages = Math.ceil(filteredCourses.length / coursesPerPage);
      if (page < 1 || page > totalPages) return;
      currentPage = page;
      renderCourses();
      setupPagination();
      window.scrollTo({ top: 0, behavior: "smooth" });
    }

    window.viewInstructorProfile = function (instructor) {
      console.log(`Viewing profile for: ${instructor}`);
      if (instructor === "Admin Team") {
        alert("This course was created by our expert admin team.");
      }
    };

    updateFilterChipStates();
    updateClearButton();   
  });
</script>
