@using JapaneseLearningPlatform.Data.ViewModels
@using JapaneseLearningPlatform.Data.Static
@using JapaneseLearningPlatform.Data
@using JapaneseLearningPlatform.Data.Enums;

@model IEnumerable<CourseWithPurchaseVM>

@{
    ViewData["Title"] = "All Courses";
    ViewData["HideNavbar"] = false;
    ViewData["HideFooter"] = false;

    var currentUser = User.Identity.IsAuthenticated;
    var isAdmin = User.IsInRole(UserRoles.Admin);
}
@section Styles {
    <!-- Google Fonts -->
    <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700;800&display=swap"
        rel="stylesheet"
    />

    <link
        rel="stylesheet"
        href="~/css/styles.css"
        asp-append-version="true"
    />

    <!-- Page-specific CSS -->
    <link rel="stylesheet" href="~/css/courses.css" />
    <link rel="stylesheet" href="~/css/footer.css" />
}

@section Scripts {
    <script
        src="~/js/script.js"
        asp-append-version="true">
    </script>
}
<!-- Enhanced Hero Section with Gradient & Sakura Petals -->
<section class="enhanced-hero">
    <div class="sakura-container" id="sakuraContainer">
        @* Sakura petals will be generated by JavaScript *@
    </div>

    <div class="container">
        <div class="enhanced-hero-content">
            <h1 class="enhanced-hero-title">
                Master Japanese Language
            </h1>
            <p class="enhanced-hero-subtitle">
                Discover our comprehensive collection of Japanese courses designed
                by experts. From complete beginners to advanced learners, find
                your perfect learning path with our structured curriculum.
            </p>

            <div class="enhanced-hero-stats">
                <div class="enhanced-stat">
                    <span class="enhanced-stat-number">12+</span>
                    <span class="enhanced-stat-label">Expert Courses</span>
                </div>
                <div class="enhanced-stat">
                    <span class="enhanced-stat-number">5,000+</span>
                    <span class="enhanced-stat-label">Active Students</span>
                </div>
                <div class="enhanced-stat">
                    <span class="enhanced-stat-number">4.9</span>
                    <span class="enhanced-stat-label">Average Rating</span>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container mt-4">
    <h2 class="fw-bold mb-4 text-center">Explore All Courses</h2>
</div>
<div class="container">
    <div class="mb-4">
    <form asp-action="Filter" method="get" class="row g-2 align-items-center">
        <div class="col-auto">
            <label class="form-label mb-0">Category:</label>
        </div>
        <div class="col-auto">
            <select name="selectedCategory" class="form-select">
                <option value="">Select a category...</option>
                @foreach (CourseCategory category in Enum.GetValues(typeof(CourseCategory)))
                {
                    var isSelected = ViewBag.SelectedCategory != null && category.ToString() == ViewBag.SelectedCategory.ToString();
                    var selectedAttr = isSelected ? "selected" : "";
                    @: <option value="@category" @selectedAttr>@category</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <input type="text" name="searchString" class="form-control" placeholder="Search by name..." value="@ViewBag.SearchString" />
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-funnel"></i> Apply Filter
            </button>
        </div>
    </form>
</div>


    @* Admin Create Button *@
    @if (isAdmin)
    {
        <div class="text-end mb-3">
            @await Html.PartialAsync("_CreateItem", "Courses")
        </div>
    }

    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var item in Model)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-0">
                    <img src="@item.Course.ImageURL" class="card-img-top" alt="@item.Course.Name" style="object-fit: cover; height: 200px;">
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@item.Course.Name</h5>
                        <p class="card-text">@item.Course.Description?.Substring(0, Math.Min(100, item.Course.Description.Length))...</p>
                        <p>
                            <strong>Category:</strong> @item.Course.CourseCategory <br />
                            @if (item.DiscountPercent != null && item.Course.StartDate <= DateTime.Now && item.Course.EndDate >= DateTime.Now)
                            {
                            <p class="text-danger">
                                <del>@item.Course.Price.ToString("C")</del>
                                <strong>@item.Course.FinalPrice.ToString("C")</strong>
                                <span class="badge bg-danger">@item.Course.DiscountPercent% OFF</span>
                            </p>
                        }
                        else
                        {
                            <p><strong>@item.Course.Price.ToString("C")</strong></p>
                        }
                        </p>
                        <div class="mt-auto">
                            @if (!isAdmin)
                            {
                                if (item.IsPurchased)
                                {
                                    <a asp-controller="Courses" asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-danger w-100 mt-2">
                                    <i class="bi bi-play-btn"></i> Start Learning
                                </a>
                                }
                                else if (item.IsInCart)
                                {
                                    <a asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-outline-primary w-100">
                                <i class="bi bi-info-circle"></i> Details
                            </a>
                                    <button class="btn btn-warning w-100 mt-2" disabled>
                                        <i class="bi bi-cart-check"></i> In Cart
                                    </button>
                                }
                                else
                                {
                                    <a asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-outline-primary w-100">
                                <i class="bi bi-info-circle"></i> Details
                            </a>
                                    <a asp-controller="Orders" asp-action="AddItemToShoppingCart" asp-route-id="@item.Course.Id"
                                       class="btn btn-danger w-100 mt-2">
                                        <i class="bi bi-cart-plus"></i> Add to Cart
                                    </a>
                                }
                            }
                            @if (isAdmin)
                            {
                                <a asp-action="Details" asp-route-id="@item.Course.Id" class="btn btn-outline-primary w-100">
                                <i class="bi bi-info-circle"></i> Details
                            </a>
                                <div class="d-flex gap-2 mt-3">
                                    <a asp-action="Edit" asp-route-id="@item.Course.Id" class="btn btn-sm btn-outline-warning w-50">
                                        <i class="bi bi-pencil-square"></i> Edit
                                    </a>
                                    <form asp-action="DeleteConfirmed" asp-route-id="@item.Course.Id" method="post" class="w-50">
                                        <button type="submit" class="btn btn-sm btn-outline-danger w-100"
                                                onclick="return confirm('Are you sure you want to delete this course?');">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @await Html.PartialAsync("_CreateItem", "Courses")

    @* Pagination *@
    <div class="mt-4 text-center">
        <nav>
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-page="@i">@i</a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>
<!-- Enhanced Scripts -->
<script src="~/js/script.js" asp-append-version="true"></script>
<script>
  // Enhanced Courses Page Functionality
  document.addEventListener("DOMContentLoaded", function () {
    // Initialize sakura petals animation
    initializeSakuraPetals();

    // Mock course data (admin-created courses)
    const courses = [
      {
        id: 1,
        title: "Complete Japanese for Beginners",
        description:
          "Start your Japanese journey with hiragana, katakana, and basic grammar concepts.",
        image:
          "https://images.unsplash.com/photo-1528164344705-47542687000d?w=400&h=300&fit=crop",
        level: "Beginner",
        category: "grammar",
        price: 49,
        duration: "8 weeks",
        students: 1205,
        rating: 4.8,
        lessons: 24,
        instructor: "Admin Team",
      },
      {
        id: 2,
        title: "Japanese Grammar Mastery",
        description:
          "Deep dive into Japanese grammar structures and patterns for intermediate learners.",
        image:
          "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400&h=300&fit=crop",
        level: "Intermediate",
        category: "grammar",
        price: 89,
        duration: "12 weeks",
        students: 856,
        rating: 4.9,
        lessons: 36,
        instructor: "Admin Team",
      },
      {
        id: 3,
        title: "Business Japanese Essentials",
        description:
          "Professional Japanese for workplace communication and business contexts.",
        image:
          "https://images.unsplash.com/photo-1551434678-e076c223a692?w=400&h=300&fit=crop",
        level: "Advanced",
        category: "business",
        price: 129,
        duration: "10 weeks",
        students: 423,
        rating: 4.7,
        lessons: 30,
        instructor: "Admin Team",
      },
      {
        id: 4,
        title: "JLPT N5 Preparation",
        description:
          "Complete preparation course for the Japanese Language Proficiency Test N5 level.",
        image:
          "https://images.unsplash.com/photo-1434030216411-0b793f4b4173?w=400&h=300&fit=crop",
        level: "Beginner",
        category: "jlpt",
        price: 79,
        duration: "16 weeks",
        students: 2103,
        rating: 4.9,
        lessons: 48,
        instructor: "Admin Team",
      },
      {
        id: 5,
        title: "Japanese Conversation Practice",
        description:
          "Improve your speaking skills with practical conversation scenarios and role-plays.",
        image:
          "https://images.unsplash.com/photo-1577563908411-5077b6dc7624?w=400&h=300&fit=crop",
        level: "Intermediate",
        category: "conversation",
        price: 69,
        duration: "8 weeks",
        students: 734,
        rating: 4.6,
        lessons: 24,
        instructor: "Admin Team",
      },
      {
        id: 6,
        title: "Kanji Mastery Course",
        description:
          "Systematic approach to learning and remembering Japanese kanji characters.",
        image:
          "https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=400&h=300&fit=crop",
        level: "Elementary",
        category: "writing",
        price: 59,
        duration: "20 weeks",
        students: 1567,
        rating: 4.8,
        lessons: 60,
        instructor: "Admin Team",
      },
    ];

    let filteredCourses = [...courses];
    let currentPage = 1;
    const coursesPerPage = 6;
    const userPurchases = ["1", "4"]; // Mock purchased courses

    // Initialize page
    initializePage();

    function initializePage() {
      renderCourses();
      setupEventListeners();
      updateResultsCount();
      setupPagination();
      setupAutocomplete();
    }

    function initializeSakuraPetals() {
      const sakuraContainer = document.getElementById("sakuraContainer");
      // Create 9 sakura petals
      for (let i = 1; i <= 9; i++) {
        const petal = document.createElement("div");
        petal.className = "sakura-petal";
        sakuraContainer.appendChild(petal);
      }
    }

    function setupEventListeners() {
      document
        .getElementById("courseSearch")
        .addEventListener("input", handleSearch);

      setupFilterHoverBehavior();
      document
        .getElementById("categoryFilter")
        .addEventListener("change", handleFilters);
      document
        .getElementById("levelFilter")
        .addEventListener("change", handleFilters);
      document
        .getElementById("priceFilter")
        .addEventListener("change", handleFilters);
      document
        .getElementById("sortFilter")
        .addEventListener("change", handleFilters);

      document
        .getElementById("clearFilters")
        .addEventListener("click", clearAllFilters);

      document.querySelectorAll(".filter-pill select").forEach((select) => {
        select.addEventListener("change", updateFilterChipState);
      });
    }

    function setupFilterHoverBehavior() {
      document.querySelectorAll(".filter-pill").forEach((pill) => {
        const select = pill.querySelector("select");
        pill.addEventListener("mouseenter", () => {
          if (select && !select.disabled) {
            select.focus();
          }
        });
      });
    }

    function handleSearch(e) {
      const searchTerm = e.target.value.toLowerCase();
      filteredCourses = courses.filter(
        (course) =>
          course.title.toLowerCase().includes(searchTerm) ||
          course.description.toLowerCase().includes(searchTerm) ||
          course.category.toLowerCase().includes(searchTerm)
      );
      applyFiltersAndSort();
      currentPage = 1;
      renderCourses();
      updateResultsCount();
      setupPagination();
    }

    function handleFilters() {
      applyFiltersAndSort();
      currentPage = 1;
      renderCourses();
      updateResultsCount();
      setupPagination();
      updateClearButton();
    }

    function applyFiltersAndSort() {
      const category = document.getElementById("categoryFilter").value;
      const level = document.getElementById("levelFilter").value;
      const priceRange = document.getElementById("priceFilter").value;
      const sortBy = document.getElementById("sortFilter").value;

      filteredCourses = courses.filter((course) => {
        const matchesSearch =
          !document.getElementById("courseSearch").value ||
          course.title
            .toLowerCase()
            .includes(document.getElementById("courseSearch").value.toLowerCase()) ||
          course.description
            .toLowerCase()
            .includes(document.getElementById("courseSearch").value.toLowerCase());

        const matchesCategory = !category || course.category === category;
        const matchesLevel = !level || course.level === level;

        let matchesPrice = true;
        if (priceRange) {
          const [min, max] = priceRange
            .split("-")
            .map((p) => (p === "+" ? Infinity : parseInt(p)));
          matchesPrice = course.price >= min && (max === undefined || course.price <= max);
        }

        return matchesSearch && matchesCategory && matchesLevel && matchesPrice;
      });

      switch (sortBy) {
        case "rating":
          filteredCourses.sort((a, b) => b.rating - a.rating);
          break;
        case "newest":
          filteredCourses.sort((a, b) => b.id - a.id);
          break;
        case "price-low":
          filteredCourses.sort((a, b) => a.price - b.price);
          break;
        case "price-high":
          filteredCourses.sort((a, b) => b.price - a.price);
          break;
        default: // popular
          filteredCourses.sort((a, b) => b.students - a.students);
      }
    }

    function clearAllFilters() {
      document.getElementById("courseSearch").value = "";
      document.getElementById("categoryFilter").value = "";
      document.getElementById("levelFilter").value = "";
      document.getElementById("priceFilter").value = "";
      document.getElementById("sortFilter").value = "popular";

      filteredCourses = [...courses];
      applyFiltersAndSort();
      currentPage = 1;
      renderCourses();
      updateResultsCount();
      setupPagination();
      updateClearButton();
      updateFilterChipStates();
    }

    function updateFilterChipState(e) {
      const pill = e.target.closest(".filter-pill");
      if (e.target.value) {
        pill.classList.add("active");
      } else {
        pill.classList.remove("active");
      }
      updateClearButton();
    }

    function updateFilterChipStates() {
      document.querySelectorAll(".filter-pill").forEach((pill) => {
        const select = pill.querySelector("select");
        if (select.value) {
          pill.classList.add("active");
        } else {
          pill.classList.remove("active");
        }
      });
    }

    function updateClearButton() {
      const hasActiveFilters =
        document.getElementById("courseSearch").value ||
        document.getElementById("categoryFilter").value ||
        document.getElementById("levelFilter").value ||
        document.getElementById("priceFilter").value ||
        document.getElementById("sortFilter").value !== "popular";

      const clearBtn = document.getElementById("clearFilters");
      if (hasActiveFilters) {
        clearBtn.classList.add("visible");
      } else {
        clearBtn.classList.remove("visible");
      }
    }

    function setupAutocomplete() {
      if (window.NihongoSekai && window.NihongoSekai.setupAutocomplete) {
        window.NihongoSekai.setupAutocomplete();
      }
    }

    function renderCourses() {
      const startIndex = (currentPage - 1) * coursesPerPage;
      const endIndex = startIndex + coursesPerPage;
      const coursesToShow = filteredCourses.slice(startIndex, endIndex);

      const gridContainer = document.getElementById("coursesGrid");
      gridContainer.innerHTML = coursesToShow
        .map((course) => {
          const isPurchased = userPurchases.includes(course.id.toString());
          return `
            <div class="enhanced-card" data-course-id="${course.id}">
              <div class="enhanced-card-image">
                <img src="${course.image}" alt="${course.title}" loading="lazy" />
                <div class="level-badge">${course.level}</div>
                ${isPurchased ? '<div class="purchased-badge">Purchased</div>' : ""}
                <div class="card-overlay">
                  <a href="course-detail.html?id=${course.id}" class="overlay-button">
                    View Details
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="9,18 15,12 9,6"></polyline>
                    </svg>
                  </a>
                </div>
              </div>
              <div class="enhanced-card-content">
                <h3 class="enhanced-card-title">${course.title}</h3>
                <p class="enhanced-card-description">${course.description}</p>
                <div class="instructor-info" onclick="viewInstructorProfile('${course.instructor}')">
                  <div class="instructor-avatar">
                    ${course.instructor
                      .split(" ")
                      .map((n) => n[0])
                      .join("")}
                  </div>
                  <span class="instructor-name">${course.instructor}</span>
                </div>
                <div class="card-stats">
                  <div class="stats-left">
                    <div class="stat-item">
                      <span>📹 ${course.lessons} lessons</span>
                    </div>
                    <div class="stat-item">
                      <span>👥 ${course.students.toLocaleString()}</span>
                    </div>
                  </div>
                  <div class="rating-display">
                    <div class="stars">${generateStars(course.rating)}</div>
                    <span>${course.rating}</span>
                  </div>
                </div>
              </div>
            </div>
          `;
        })
        .join("");
    }

    function generateStars(rating) {
      const fullStars = Math.floor(rating);
      const hasHalfStar = rating % 1 >= 0.5;
      let stars = "";

      for (let i = 0; i < fullStars; i++) {
        stars += "★";
      }
      if (hasHalfStar) {
        stars += "☆";
      }
      return stars;
    }

    function updateResultsCount() {
      const count = filteredCourses.length;
      const countElement = document.getElementById("resultsCount");
      countElement.textContent = `${count} ${count === 1 ? "course" : "courses"} found`;
    }

    function setupPagination() {
      const totalPages = Math.ceil(filteredCourses.length / coursesPerPage);
      const paginationNumbers = document.getElementById("paginationNumbers");
      const prevBtn = document.getElementById("prevPage");
      const nextBtn = document.getElementById("nextPage");

      prevBtn.disabled = currentPage === 1;
      nextBtn.disabled = currentPage === totalPages || totalPages === 0;

      paginationNumbers.innerHTML = "";
      for (let i = 1; i <= totalPages; i++) {
        const pageBtn = document.createElement("button");
        pageBtn.textContent = i;
        pageBtn.className = `pagination-number ${i === currentPage ? "active" : ""}`;
        pageBtn.addEventListener("click", () => goToPage(i));
        paginationNumbers.appendChild(pageBtn);
      }

      prevBtn.onclick = () => goToPage(currentPage - 1);
      nextBtn.onclick = () => goToPage(currentPage + 1);
    }

    function goToPage(page) {
      const totalPages = Math.ceil(filteredCourses.length / coursesPerPage);
      if (page < 1 || page > totalPages) return;
      currentPage = page;
      renderCourses();
      setupPagination();
      window.scrollTo({ top: 0, behavior: "smooth" });
    }

    window.viewInstructorProfile = function (instructor) {
      console.log(`Viewing profile for: ${instructor}`);
      if (instructor === "Admin Team") {
        alert("This course was created by our expert admin team.");
      }
    };

    updateFilterChipStates();
    updateClearButton();
  });
</script>
