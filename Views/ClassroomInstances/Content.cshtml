@using JapaneseLearningPlatform.Data.ViewModels
@model ClassroomContentVM

@{
    ViewData["Title"] = "Xem nội dung lớp học";
}

<div class="container mt-4">

    <!-- 🔹 Header -->
    <div class="bg-light p-4 rounded shadow-sm mb-4">
        <h2 class="fw-bold">@Model.Template.Title</h2>
        <p class="mb-1"><strong>Người hướng dẫn:</strong> @Model.PartnerName</p>
        <p class="mb-1"><strong>Lịch:</strong> @Model.Instance.StartDate.ToShortDateString() → @Model.Instance.EndDate.ToShortDateString()</p>
        <p class="mb-1"><strong>Thời gian:</strong> @($"{Model.Instance.ClassTime.Hours:D2}:{Model.Instance.ClassTime.Minutes:D2}")</p>
        <p class="mb-1"><strong>Meet Link:</strong> <a href="@Model.Instance.GoogleMeetLink" target="_blank">@Model.Instance.GoogleMeetLink</a></p>
    </div>

    <!-- 🔸 Tabs -->
    <ul class="nav nav-tabs mb-3" id="classTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" id="overview-tab" data-bs-toggle="tab" href="#overview" role="tab">Tổng quan</a>
        </li>
        <li class="nav-item" role="presentation">
            @if (User.IsInRole("Partner") || User.IsInRole("Admin"))
            {
                <a class="nav-link" id="learners-tab" data-bs-toggle="tab" href="#learners" role="tab">Danh sách học viên</a>
            }
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="resources-tab" data-bs-toggle="tab" href="#resources" role="tab">Tài nguyên</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="assignment-tab" data-bs-toggle="tab" href="#assignment" role="tab">Đánh giá cuối kỳ</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="review-tab" data-bs-toggle="tab" href="#review" role="tab">Feedback</a>
        </li>
    </ul>

    <!-- 🔸 Tab Contents -->
    <div class="tab-content" id="classTabsContent">
        <!-- 🔹 Overview -->
        <div class="tab-pane fade show active" id="overview" role="tabpanel">
            <div class="p-3">
                <h5 class="fw-bold">Mô tả lớp học</h5>
                <p class="text-muted">Hiện không có sẵn.</p>
            </div>
        </div>

        <!-- 🔹 Resources -->
        <div class="tab-pane fade" id="resources" role="tabpanel">
            <div class="p-3">
                @if (User.IsInRole("Partner"))
                {
                    <div class="mb-3">
                        <input type="file" id="fileInput" class="form-control mb-2" multiple />
                        <button type="button" class="btn btn-danger" onclick="uploadAllFiles()">Upload Files</button>
                        <small id="uploadMessage" class="d-block mt-1"></small>
                    </div>

                    <div id="uploadPreviewContainer" style="display:none;">
                        <h6 class="fw-bold mt-3">File tải lên</h6>
                        <ul class="list-group mt-2" id="filePreview"></ul>
                    </div>
                }

                <h5 class="mt-4">Tài nguyên học tập</h5>
                <table class="table table-bordered table-hover mt-3" id="materialsList">
                    <thead class="table-light">
                        <tr>
                            <th style="width:5%;">STT</th>
                            <th>Tên File</th>
                            <th style="width:20%;">@(User.IsInRole("Partner") ? "Xóa" : "Tải xuống")</th>
                            <th style="width:20%;">Ngày Tạo</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Resources == null || !Model.Resources.Any())
                        {
                            <tr>
                                <td colspan="4" class="text-muted text-center">
                                    Chưa có tài liệu nào được thêm.
                                </td>
                            </tr>
                        }
                        else
                        {
                            int index = 1;
                            foreach (var resource in Model.Resources)
                            {
                                <tr data-id="@resource.Id">
                                    <td>@index</td>
                                    <td>@resource.FileName</td>
                                    <td>
                                        @if (User.IsInRole("Partner"))
                                        {
                                            <button type="button" class="btn btn-sm btn-danger" onclick="deleteResource(@resource.Id, this)">
                                                <i class="bi bi-trash"></i> Xóa
                                            </button>
                                        }
                                        else
                                        {
                                            <a asp-action="DownloadResource" asp-controller="ClassroomInstances"
                                               asp-route-id="@resource.Id" class="btn btn-sm btn-primary">
                                                Tải File
                                            </a>
                                        }
                                    </td>
                                    <td>@resource.UploadedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                </tr>
                                index++;
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    const msgBox = document.getElementById("uploadMessage");
    const isPartner = @User.IsInRole("Partner").ToString().ToLower();
    let fileList = [];
    const allowedExtensions = [".pdf", ".docx", ".xlsx", ".png", ".jpg", ".jpeg", ".zip"];

    function showMessage(text, cssClass) {
        msgBox.textContent = text;
        msgBox.className = cssClass + " d-block mt-1";
        setTimeout(() => {
            msgBox.textContent = "";
            msgBox.className = "d-block mt-1";
        }, 3000);
    }

    document.getElementById("fileInput")?.addEventListener("change", function (e) {
        const newFiles = Array.from(e.target.files);
        newFiles.forEach(file => {
            const ext = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();
            if (!allowedExtensions.includes(ext)) {
                showMessage(`File "${file.name}" có định dạng không hợp lệ! Chỉ chấp nhận: ${allowedExtensions.join(", ")}`, "text-danger");
            } else if (fileList.some(f => f.name === file.name && f.size === file.size)) {
                showMessage(`Bạn đã chọn file "${file.name}" rồi trong danh sách Files to Upload!`, "text-warning");
            } else {
                fileList.push(file);
            }
        });
        renderPreview();
        document.getElementById("uploadPreviewContainer").style.display = fileList.length > 0 ? "block" : "none";
        e.target.value = "";
    });

    function renderPreview() {
        const preview = document.getElementById("filePreview");
        preview.innerHTML = "";
        fileList.forEach((file, index) => {
            const li = document.createElement("li");
            li.className = "list-group-item d-flex justify-content-between align-items-center";
            li.textContent = file.name;
            const removeBtn = document.createElement("button");
            removeBtn.className = "btn btn-sm btn-outline-danger";
            removeBtn.textContent = "X";
            removeBtn.onclick = () => {
                fileList.splice(index, 1);
                renderPreview();
                document.getElementById("uploadPreviewContainer").style.display = fileList.length > 0 ? "block" : "none";
            };
            li.appendChild(removeBtn);
            preview.appendChild(li);
        });
    }

    async function uploadAllFiles() {
        if (fileList.length === 0) {
            showMessage("Không có file nào được chọn!", "text-danger");
            return;
        }
        const formData = new FormData();
        fileList.forEach(file => formData.append("files", file));
        formData.append("classroomId", @Model.Instance.Id);

        try {
            const response = await fetch("/ClassroomInstances/UploadResource", {
                method: "POST",
                body: formData
            });
            const result = await response.json();
            showMessage(result.message, result.success ? "text-success" : "text-danger");
            if (result.success && result.newResources) {
                updateLearningMaterials(result.newResources);
                fileList = [];
                renderPreview();
                document.getElementById("uploadPreviewContainer").style.display = "none";
            }
        } catch (err) {
            console.error(err);
            showMessage("Có lỗi xảy ra khi upload.", "text-danger");
        }
    }

    function updateLearningMaterials(resources) {
        const container = document.querySelector("#materialsList tbody");
        container.innerHTML = "";
        if (!resources || resources.length === 0) {
            container.innerHTML = `<tr><td colspan="4" class="text-muted text-center">Chưa có tài liệu nào được thêm.</td></tr>`;
        } else {
            resources.forEach((r, index) => {
                const actionBtn = isPartner
                    ? `<button type="button" class="btn btn-sm btn-danger" onclick="deleteResource(${r.id}, this)"><i class="bi bi-trash"></i> Delete</button>`
                    : `<a href="/ClassroomInstances/DownloadResource/${r.id}" class="btn btn-sm btn-primary">Download File</a>`;
                container.innerHTML += `
                    <tr data-id="${r.id}">
                        <td>${index + 1}</td>
                        <td>${r.fileName}</td>
                        <td>${actionBtn}</td>
                        <td>${r.uploadedAt}</td>
                    </tr>
                `;
            });
        }
    }

    async function deleteResource(id, btn) {
        if (!confirm("Bạn có chắc chắn muốn xóa tài liệu này?")) return;
        try {
            const response = await fetch("/ClassroomInstances/DeleteResource", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `id=${id}`
            });
            const result = await response.json();
            showMessage(result.message, result.success ? "text-success" : "text-danger");
            if (result.success) {
                btn.closest("tr").remove();
                const rows = document.querySelectorAll("#materialsList tbody tr");
                if (rows.length === 0) {
                    updateLearningMaterials([]);
                }
            }
        } catch (error) {
            console.error(error);
            showMessage("Có lỗi xảy ra khi xóa tài liệu.", "text-danger");
        }
    }
</script>
