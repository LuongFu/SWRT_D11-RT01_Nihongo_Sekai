@using JapaneseLearningPlatform.Data.ViewModels
@model ClassroomContentVM

@{
    ViewData["Title"] = "Classroom Content";
}

<div class="container mt-4">

    <!-- 🔹 Header -->
    <div class="bg-light p-4 rounded shadow-sm mb-4">
        <h2 class="fw-bold">@Model.Template.Title</h2>
        <p class="mb-1"><strong>Partner:</strong> @Model.PartnerName</p>
        <p class="mb-1"><strong>Schedule:</strong> @Model.Instance.StartDate.ToShortDateString() → @Model.Instance.EndDate.ToShortDateString()</p>
        <p class="mb-1"><strong>Time:</strong> @($"{Model.Instance.ClassTime.Hours:D2}:{Model.Instance.ClassTime.Minutes:D2}")</p>
        <p class="mb-1"><strong>Meet Link:</strong> <a href="@Model.Instance.GoogleMeetLink" target="_blank">@Model.Instance.GoogleMeetLink</a></p>
    </div>

    <!-- 🔸 Tabs -->
    <ul class="nav nav-tabs mb-3" id="classTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" id="overview-tab" data-bs-toggle="tab" href="#overview" role="tab">
                Overview
            </a>
        </li>
        <li class="nav-item" role="presentation">
            @if (User.IsInRole("Partner") || User.IsInRole("Admin"))
            {
                <a class="nav-link" id="learners-tab" data-bs-toggle="tab" href="#learners" role="tab">
                    Learners
                </a>
            }
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="resources-tab" data-bs-toggle="tab" href="#resources" role="tab">
                Resources
            </a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="assignment-tab" data-bs-toggle="tab" href="#assignment" role="tab">
                Final Assignment
            </a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="review-tab" data-bs-toggle="tab" href="#review" role="tab">
                Feedback
            </a>
        </li>
    </ul>

    <!-- 🔸 Tab Contents -->
    <div class="tab-content" id="classTabsContent">
        <!-- 🔹 Overview -->
        <div class="tab-pane fade show active" id="overview" role="tabpanel">
            <div class="p-3">
                <h5 class="fw-bold">Class Description</h5>
                <p class="text-muted">The class description or content is not available yet.</p>

                <!-- TODO: Uncomment and use later when ContentHtml is added -->
                @*
                <p>@Html.Raw(Model.Template.ContentHtml ?? Model.Template.Description)</p>
                *@
            </div>
        </div>
        <!-- 🔸 Learners List -->
        @if (User.IsInRole("Partner") || User.IsInRole("Admin"))
        {
            <div class="tab-pane fade" id="learners" role="tabpanel" aria-labelledby="learners-tab">
                <div class="p-3">
                    <h5 class="fw-bold mb-3">Enrolled Learners</h5>

                    @if (Model.Instance.Enrollments == null || !Model.Instance.Enrollments.Any())
                    {
                        <p class="text-muted">No learners have enrolled in this class yet.</p>
                    }
                    else
                    {
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 5%">#</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Enrolled At</th>
                                    <th style="width: 15%">Action</th> <!-- Thêm cột Action -->
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int index = 1;
                                    foreach (var enrollment in Model.Instance.Enrollments)
                                    {
                                        <tr>
                                            <td>@index</td>
                                            <td>@enrollment.Learner?.FullName</td>
                                            <td>@enrollment.Learner?.Email</td>
                                            <td>@enrollment.EnrolledAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                                            <td>
                                                <a asp-controller="Account"
                                                   asp-action="ViewProfile"
                                                   asp-route-learnerId="@enrollment.Learner?.Id"
                                                   asp-route-classroomId="@Model.Instance.Id"
                                                   class="btn btn-info btn-sm">View Profile</a>
                                            </td>
                                        </tr>
                                        index++;
                                    }
                                }

                            </tbody>
                        </table>
                    }
                </div>
            </div>
        }

        <!-- 🔹 Resources -->
        <div class="tab-pane fade" id="resources" role="tabpanel">
            <div class="p-3">
                <!-- Upload Form (Partner only) -->
                @if (User.IsInRole("Partner"))
                {
                    <div class="mb-3">
                        <input type="file" id="fileInput" class="form-control mb-2" multiple />
                        <button type="button" class="btn btn-danger" onclick="uploadAllFiles()">Upload Files</button>
                        <small id="uploadMessage" class="d-block mt-1"></small>
                    </div>

                    <!-- Container preview file - ẩn mặc định -->
                    <div id="uploadPreviewContainer" style="display:none;">
                        <h6 class="fw-bold mt-3">Files to Upload</h6>
                        <ul class="list-group mt-2" id="filePreview"></ul>
                    </div>
                }
                <h5 class="mt-4">Learning Materials</h5>
                <ul class="list-group mt-2" id="materialsList">
                    @if (Model.Resources == null || !Model.Resources.Any())
                    {
                        <li class="list-group-item text-muted" id="noResourceMsg">
                            Chưa có tài liệu nào được thêm.
                        </li>
                    }
                    else
                    {
                        @foreach (var resource in Model.Resources)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center" data-id="@resource.Id">
                                <span>
                                    @resource.FileName
                                    <small class="text-muted ms-2">(@resource.UploadedAt.ToString("dd/MM/yyyy"))</small>
                                </span>
                                @if (User.IsInRole("Partner"))
                                {
                                    <button type="button" class="btn btn-sm btn-danger"
                                            onclick="deleteResource(@resource.Id, this)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                }
                                else
                                {
                                    <a asp-action="DownloadResource" asp-controller="ClassroomInstances"
                                       asp-route-id="@resource.Id" class="btn btn-sm btn-success">
                                        Download
                                    </a>
                                }
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>

        <!-- 🔹 Final Assignment -->
        <div class="tab-pane fade" id="assignment" role="tabpanel">
            <div class="p-3">
                <h5 class="fw-bold">Final Assignment</h5>

                @if (Model.FinalAssignment != null)
                {
                    <p><strong>Instructions:</strong></p>
                    <p>@Html.Raw(Model.FinalAssignment.Instructions)</p>

                    @if (Model.FinalAssignment?.DueDate != null)
                    {
                        <p><strong>Due Date:</strong> @Model.FinalAssignment.DueDate.Value.ToString("dd/MM/yyyy HH:mm")</p>
                    }

                    @if (User.IsInRole("Learner")) // Learner View
                    {
                        @if (TempData["Message"] != null)
                        {
                            <div class="alert alert-success">
                                @TempData["Message"]
                            </div>
                        }

                        @if (Model.HasSubmitted)
                        {
                            <p class="text-success">✅ You have already submitted your assignment.</p>
                            <p><strong>Score:</strong> @(Model.Submission?.Score?.ToString() ?? "-")</p>
                            <p><strong>Feedback:</strong> @(Model.Submission?.Feedback ?? "Not reviewed yet")</p>

                            <div class="mb-3 mt-4">
                                <label class="form-label fw-bold">Your Previous Answer:</label>
                                <textarea class="form-control" rows="5" readonly>@Model.Submission?.AnswerText</textarea>
                            </div>
                        }

                        @if (Model.Submission?.Score != null)
                        {
                            <p class="text-danger mt-3">✅ Your submission has already been graded. You cannot modify it.</p>
                        }
                        else if (Model.FinalAssignment?.DueDate != null && Model.FinalAssignment.DueDate <= DateTime.Now)
                        {
                            <p class="text-danger mt-3">⛔ You cannot submit. The deadline has passed.</p>
                        }
                        else
                        {
                            <!-- Form for new or resubmission -->
                            <form id="assignmentForm" asp-action="SubmitAssignment" asp-controller="Assignments" asp-route-instanceId="@Model.Instance.Id" method="post" enctype="multipart/form-data">
                                <div class="mb-3">
                                    <label for="AnswerText" class="form-label fw-bold">Your New Answer (optional)</label>
                                    <textarea id="answerText" name="answerText" rows="5" class="form-control" placeholder="Write your answer here..."></textarea>
                                </div>

                                <div class="mb-3">
                                    <label for="submission" class="form-label fw-bold">Upload a new file (optional)</label>
                                    <input id="submissionFile" type="file" name="SubmissionFile" class="form-control" />
                                </div>

                                <button type="submit" class="btn btn-success">@(Model.HasSubmitted ? "Resubmit" : "Submit")</button>
                            </form>
                        }
                    }

                    else if (User.IsInRole("Partner"))  //Partner View
                    {
                        <form asp-action="UpdateDeadline" asp-controller="Assignments" asp-route-assignmentId="@Model.FinalAssignment.Id" method="post" class="d-flex align-items-center gap-2 mt-2">
                            <input type="text" id="newDueDate" name="newDueDate" class="form-control" required placeholder="-- Select a new due date --" />
                            <button type="submit" class="btn btn-outline-primary btn-sm">Update Deadline</button>
                        </form>

                        @if (TempData["DeadlineMessage"] != null)
                        {
                            <div class="alert alert-info mt-2">@TempData["DeadlineMessage"]</div>
                        }
                        @if (Model.AllSubmissions == null || !Model.AllSubmissions.Any())
                        {
                            <p class="text-muted mt-3">No learners have submitted their assignments yet.</p>
                        }
                        else
                        {
                            <table class="table table-bordered table-hover mt-4">
                                <thead class="table-light">
                                    <tr>
                                        <th style="width: 5%">#</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Submitted At</th>
                                        <th>Score</th>
                                        <th>Feedback</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody><!--Đã set local time rồi nên không sửa ở đây-->
                                    @{
                                        int index = 1;
                                        foreach (var submission in Model.AllSubmissions)
                                        {
                                            var scoreStatus = submission.Score.HasValue ? submission.Score.ToString() : "Not graded";
                                            var feedbackStatus = !string.IsNullOrWhiteSpace(submission.Feedback) ? submission.Feedback : "Not reviewed";
                                            var actionLabel = submission.Score.HasValue ? "Edit" : "Grade";
                                            <tr>
                                                <td>@index</td>
                                                <td>@submission.Learner?.FullName</td>
                                                <td>@submission.Learner?.Email</td>
                                                <td>@submission.SubmittedAt.ToString("dd/MM/yyyy HH:mm")</td> 
                                                <td>@scoreStatus</td>
                                                <td>@feedbackStatus</td>
                                                <td>
                                                    <a asp-controller="Assignments" asp-action="Grade"
                                                       asp-route-submissionId="@submission.Id"
                                                       class="btn btn-sm btn-outline-primary">
                                                        @actionLabel
                                                    </a>
                                                </td>
                                            </tr>
                                            index++;
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                    }
                }
                else
                {
                    <p class="text-muted">This class does not include a final assignment.</p>
                }
            </div>
        </div>


        <!-- 🔹 Feedback -->
        <div class="tab-pane fade" id="review" role="tabpanel">
            <div class="p-3">
                <h5 class="fw-bold">Class Feedback</h5>
                @if (!Model.HasReviewed)
                {
                    <form asp-action="SubmitReview" asp-route-instanceId="@Model.Instance.Id" method="post">
                        <div class="mb-3">
                            <label for="Rating" class="form-label">Rating (1 to 5)</label>
                            <input type="number" class="form-control" name="Rating" min="1" max="5" required />
                        </div>
                        <div class="mb-3">
                            <label for="Comment" class="form-label">Your Comment</label>
                            <textarea class="form-control" name="Comment" rows="3"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit Review</button>
                    </form>
                }
                else
                {
                    <p class="text-success">✅ You've submitted your review.</p>
                }
            </div>
        </div>
    </div>

    <div class="text-center mt-5">
        <button class="btn btn-outline-secondary" onclick="history.back()">
            <i class="bi bi-arrow-left"></i> Back to Previous Page
        </button>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<!-- Hỗ trợ set deadline mới cho partner -->
<script>
    flatpickr("#newDueDate", {
        enableTime: true,
        dateFormat: "d/m/Y H:i"
    });
</script>

<!-- Điều hướng -->
<script>
    window.onload = function () {
        const hash = window.location.hash;
        if (hash) {
            const triggerEl =
                document.querySelector(`button[data-bs-toggle="tab"][data-bs-target="${hash}"]`) ||
                document.querySelector(`a[data-bs-toggle="tab"][href="${hash}"]`);
            if (triggerEl) {
                new bootstrap.Tab(triggerEl).show();
            }
        }
    };
</script>

<!-- Chặn nếu learner không submit bất kỳ loại đáp án nào -->
<script>
    const msgBox = document.getElementById("uploadMessage");

    function showMessage(text, cssClass) {
        msgBox.textContent = text;
        msgBox.className = cssClass + " d-block mt-1";

        // Tự động ẩn sau 3 giây
        setTimeout(() => {
            msgBox.textContent = "";
            msgBox.className = "d-block mt-1";
        }, 3000);
    }

    let fileList = [];
    const allowedExtensions = [".pdf", ".docx", ".xlsx", ".png", ".jpg", ".jpeg", ".zip"];

    // Khi chọn file
    document.getElementById("fileInput")?.addEventListener("change", function (e) {
        const newFiles = Array.from(e.target.files);
        msgBox.textContent = "";
        msgBox.className = "d-block mt-1";

        newFiles.forEach(file => {
            const ext = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();

            // 1. Kiểm tra định dạng
            if (!allowedExtensions.includes(ext)) {
                showMessage(
                    `File "${file.name}" có định dạng không hợp lệ! Chỉ chấp nhận: ${allowedExtensions.join(", ")}`,
                    "text-danger"
                );
            }
            // 2. Kiểm tra trùng trong preview (fileList)
            else if (fileList.some(f => f.name === file.name && f.size === file.size)) {
                showMessage(
                    `Bạn đã chọn file "${file.name}" rồi trong danh sách Files to Upload!`,
                    "text-warning"
                );
            }
            // 3. File hợp lệ
            else {
                fileList.push(file);
            }
        });

        renderPreview();
        document.getElementById("uploadPreviewContainer").style.display = fileList.length > 0 ? "block" : "none";
        e.target.value = ""; // reset input
    });

    // Hiển thị danh sách file preview
    function renderPreview() {
        const preview = document.getElementById("filePreview");
        preview.innerHTML = "";

        fileList.forEach((file, index) => {
            const li = document.createElement("li");
            li.className = "list-group-item d-flex justify-content-between align-items-center";
            li.textContent = file.name;

            const removeBtn = document.createElement("button");
            removeBtn.className = "btn btn-sm btn-outline-danger";
            removeBtn.textContent = "X";
            removeBtn.onclick = () => {
                fileList.splice(index, 1);
                renderPreview();
                document.getElementById("uploadPreviewContainer").style.display = fileList.length > 0 ? "block" : "none";
            };

            li.appendChild(removeBtn);
            preview.appendChild(li);
        });
    }

    // Upload file lên server
    async function uploadAllFiles() {
        msgBox.textContent = "";
        msgBox.className = "d-block mt-1";

        if (fileList.length === 0) {
            showMessage("Không có file nào được chọn!", "text-danger");
            return;
        }

        const formData = new FormData();
        fileList.forEach(file => formData.append("files", file));
        formData.append("classroomId", @Model.Instance.Id);

        try {
            const response = await fetch("/ClassroomInstances/UploadResource", {
                method: "POST",
                body: formData
            });

            const result = await response.json();
            showMessage(result.message, result.success ? "text-success" : "text-danger");

            if (result.success && result.newResources) {
                updateLearningMaterials(result.newResources);
                fileList = [];
                renderPreview();
                document.getElementById("uploadPreviewContainer").style.display = "none";
            }
        } catch (err) {
            console.error(err);
            showMessage("Có lỗi xảy ra khi upload.", "text-danger");
        }
    }

    // Cập nhật danh sách Learning Materials
    function updateLearningMaterials(resources) {
        const container = document.getElementById("materialsList");
        container.innerHTML = "";

        resources.forEach(r => {
            const li = document.createElement("li");
            li.className = "list-group-item d-flex justify-content-between align-items-center";
            li.innerHTML = `
                <span>
                    ${r.fileName}
                    <small class="text-muted ms-2">(${r.uploadedAt})</small>
                </span>
                <button type="button" class="btn btn-sm btn-danger" onclick="deleteResource(${r.id}, this)">
                    <i class="bi bi-trash"></i>
                </button>
            `;
            container.appendChild(li);
        });
    }

    // Xóa tài liệu
    async function deleteResource(id, btn) {
        if (!confirm("Bạn có chắc chắn muốn xóa tài liệu này?")) return;

        msgBox.textContent = "";
        try {
            const response = await fetch("/ClassroomInstances/DeleteResource", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `id=${id}`
            });

            const result = await response.json();
            showMessage(result.message, result.success ? "text-success" : "text-danger");

            if (result.success) {
                const li = btn.closest("li");
                li.remove();

                const materialsList = document.getElementById("materialsList");
                if (materialsList.querySelectorAll("li").length === 0) {
                    materialsList.innerHTML = `<li class="list-group-item text-muted" id="noResourceMsg">
                                                   Chưa có tài liệu nào được thêm.
                                               </li>`;
                }
            }
        } catch (error) {
            console.error(error);
            showMessage("Có lỗi xảy ra khi xóa tài liệu.", "text-danger");
        }
    }
</script>



